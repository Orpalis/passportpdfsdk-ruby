=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class PDFApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Annotates a previously uploaded document.
    # @param pdf_annotate_parameters [PdfAnnotateParameters] A PdfAnnotateParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfAnnotateResponse]
    def annotate(pdf_annotate_parameters, opts = {})
      data, _status_code, _headers = annotate_with_http_info(pdf_annotate_parameters, opts)
      data
    end

    # Annotates a previously uploaded document.
    # @param pdf_annotate_parameters [PdfAnnotateParameters] A PdfAnnotateParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfAnnotateResponse, Integer, Hash)>] PdfAnnotateResponse data, response status code and response headers
    def annotate_with_http_info(pdf_annotate_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.annotate ...'
      end
      # verify the required parameter 'pdf_annotate_parameters' is set
      if @api_client.config.client_side_validation && pdf_annotate_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_annotate_parameters' when calling PDFApi.annotate"
      end
      # resource path
      local_var_path = '/api/pdf/Annotate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_annotate_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfAnnotateResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#annotate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Performs auto deskew on a page range of a previously uploaded document.
    # @param pdf_auto_deskew_parameters [PdfAutoDeskewParameters] A PdfAutoDeskewParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfAutoDeskewResponse]
    def auto_deskew(pdf_auto_deskew_parameters, opts = {})
      data, _status_code, _headers = auto_deskew_with_http_info(pdf_auto_deskew_parameters, opts)
      data
    end

    # Performs auto deskew on a page range of a previously uploaded document.
    # @param pdf_auto_deskew_parameters [PdfAutoDeskewParameters] A PdfAutoDeskewParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfAutoDeskewResponse, Integer, Hash)>] PdfAutoDeskewResponse data, response status code and response headers
    def auto_deskew_with_http_info(pdf_auto_deskew_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.auto_deskew ...'
      end
      # verify the required parameter 'pdf_auto_deskew_parameters' is set
      if @api_client.config.client_side_validation && pdf_auto_deskew_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_auto_deskew_parameters' when calling PDFApi.auto_deskew"
      end
      # resource path
      local_var_path = '/api/pdf/AutoDeskew'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_auto_deskew_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfAutoDeskewResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#auto_deskew\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clears a page range from a previously uploaded document.
    # @param pdf_clear_page_parameters [PdfClearPageParameters] A PdfClearPageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfClearPageResponse]
    def clear_page(pdf_clear_page_parameters, opts = {})
      data, _status_code, _headers = clear_page_with_http_info(pdf_clear_page_parameters, opts)
      data
    end

    # Clears a page range from a previously uploaded document.
    # @param pdf_clear_page_parameters [PdfClearPageParameters] A PdfClearPageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfClearPageResponse, Integer, Hash)>] PdfClearPageResponse data, response status code and response headers
    def clear_page_with_http_info(pdf_clear_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.clear_page ...'
      end
      # verify the required parameter 'pdf_clear_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_clear_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_clear_page_parameters' when calling PDFApi.clear_page"
      end
      # resource path
      local_var_path = '/api/pdf/ClearPage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_clear_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfClearPageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#clear_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clones specific pages from a previously uploaded document to another previously uploaded document.
    # @param pdf_clone_page_parameters [PdfClonePageParameters] A PdfClonePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfClonePageResponse]
    def clone_page(pdf_clone_page_parameters, opts = {})
      data, _status_code, _headers = clone_page_with_http_info(pdf_clone_page_parameters, opts)
      data
    end

    # Clones specific pages from a previously uploaded document to another previously uploaded document.
    # @param pdf_clone_page_parameters [PdfClonePageParameters] A PdfClonePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfClonePageResponse, Integer, Hash)>] PdfClonePageResponse data, response status code and response headers
    def clone_page_with_http_info(pdf_clone_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.clone_page ...'
      end
      # verify the required parameter 'pdf_clone_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_clone_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_clone_page_parameters' when calling PDFApi.clone_page"
      end
      # resource path
      local_var_path = '/api/pdf/ClonePage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_clone_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfClonePageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#clone_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Closes a previously uploaded document.
    # @param pdf_close_document_parameters [PdfCloseDocumentParameters] A PdfCloseDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfCloseDocumentResponse]
    def close_pdf(pdf_close_document_parameters, opts = {})
      data, _status_code, _headers = close_pdf_with_http_info(pdf_close_document_parameters, opts)
      data
    end

    # Closes a previously uploaded document.
    # @param pdf_close_document_parameters [PdfCloseDocumentParameters] A PdfCloseDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfCloseDocumentResponse, Integer, Hash)>] PdfCloseDocumentResponse data, response status code and response headers
    def close_pdf_with_http_info(pdf_close_document_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.close_pdf ...'
      end
      # verify the required parameter 'pdf_close_document_parameters' is set
      if @api_client.config.client_side_validation && pdf_close_document_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_close_document_parameters' when calling PDFApi.close_pdf"
      end
      # resource path
      local_var_path = '/api/pdf/ClosePDF'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_close_document_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfCloseDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#close_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Converts a previously uploaded document to PDF/A.
    # @param pdf_convert_to_pdfa_parameters [PdfConvertToPDFAParameters] A PdfConvertToPDFAParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfConvertToPDFAResponse]
    def convert_to_pdfa(pdf_convert_to_pdfa_parameters, opts = {})
      data, _status_code, _headers = convert_to_pdfa_with_http_info(pdf_convert_to_pdfa_parameters, opts)
      data
    end

    # Converts a previously uploaded document to PDF/A.
    # @param pdf_convert_to_pdfa_parameters [PdfConvertToPDFAParameters] A PdfConvertToPDFAParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfConvertToPDFAResponse, Integer, Hash)>] PdfConvertToPDFAResponse data, response status code and response headers
    def convert_to_pdfa_with_http_info(pdf_convert_to_pdfa_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.convert_to_pdfa ...'
      end
      # verify the required parameter 'pdf_convert_to_pdfa_parameters' is set
      if @api_client.config.client_side_validation && pdf_convert_to_pdfa_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_convert_to_pdfa_parameters' when calling PDFApi.convert_to_pdfa"
      end
      # resource path
      local_var_path = '/api/pdf/ConvertToPDFA'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_convert_to_pdfa_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfConvertToPDFAResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#convert_to_pdfa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a page range from a previously uploaded document.
    # @param pdf_delete_page_parameters [PdfDeletePageParameters] A PdfDeletePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfDeletePageResponse]
    def delete_page(pdf_delete_page_parameters, opts = {})
      data, _status_code, _headers = delete_page_with_http_info(pdf_delete_page_parameters, opts)
      data
    end

    # Deletes a page range from a previously uploaded document.
    # @param pdf_delete_page_parameters [PdfDeletePageParameters] A PdfDeletePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfDeletePageResponse, Integer, Hash)>] PdfDeletePageResponse data, response status code and response headers
    def delete_page_with_http_info(pdf_delete_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.delete_page ...'
      end
      # verify the required parameter 'pdf_delete_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_delete_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_delete_page_parameters' when calling PDFApi.delete_page"
      end
      # resource path
      local_var_path = '/api/pdf/DeletePage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_delete_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfDeletePageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#delete_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them.
    # @param pdf_detect_page_orientation_parameters [PdfDetectPageOrientationParameters] A PdfDetectPageOrientationParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfDetectPageOrientationResponse]
    def detect_page_orientation(pdf_detect_page_orientation_parameters, opts = {})
      data, _status_code, _headers = detect_page_orientation_with_http_info(pdf_detect_page_orientation_parameters, opts)
      data
    end

    # Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them.
    # @param pdf_detect_page_orientation_parameters [PdfDetectPageOrientationParameters] A PdfDetectPageOrientationParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfDetectPageOrientationResponse, Integer, Hash)>] PdfDetectPageOrientationResponse data, response status code and response headers
    def detect_page_orientation_with_http_info(pdf_detect_page_orientation_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.detect_page_orientation ...'
      end
      # verify the required parameter 'pdf_detect_page_orientation_parameters' is set
      if @api_client.config.client_side_validation && pdf_detect_page_orientation_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_detect_page_orientation_parameters' when calling PDFApi.detect_page_orientation"
      end
      # resource path
      local_var_path = '/api/pdf/DetectPageOrientation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_detect_page_orientation_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfDetectPageOrientationResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#detect_page_orientation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Signs a previously uploaded document digitally.
    # @param pdf_digi_sign_parameters [PdfDigiSignParameters] A PdfDigiSignParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfDigiSignResponse]
    def digi_sign(pdf_digi_sign_parameters, opts = {})
      data, _status_code, _headers = digi_sign_with_http_info(pdf_digi_sign_parameters, opts)
      data
    end

    # Signs a previously uploaded document digitally.
    # @param pdf_digi_sign_parameters [PdfDigiSignParameters] A PdfDigiSignParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfDigiSignResponse, Integer, Hash)>] PdfDigiSignResponse data, response status code and response headers
    def digi_sign_with_http_info(pdf_digi_sign_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.digi_sign ...'
      end
      # verify the required parameter 'pdf_digi_sign_parameters' is set
      if @api_client.config.client_side_validation && pdf_digi_sign_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_digi_sign_parameters' when calling PDFApi.digi_sign"
      end
      # resource path
      local_var_path = '/api/pdf/DigiSign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_digi_sign_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfDigiSignResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#digi_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Draws an image on a page range of a previously uploaded document.
    # @param pdf_draw_image_parameters [PdfDrawImageParameters] A PdfDrawImageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfDrawImageResponse]
    def draw_image(pdf_draw_image_parameters, opts = {})
      data, _status_code, _headers = draw_image_with_http_info(pdf_draw_image_parameters, opts)
      data
    end

    # Draws an image on a page range of a previously uploaded document.
    # @param pdf_draw_image_parameters [PdfDrawImageParameters] A PdfDrawImageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfDrawImageResponse, Integer, Hash)>] PdfDrawImageResponse data, response status code and response headers
    def draw_image_with_http_info(pdf_draw_image_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.draw_image ...'
      end
      # verify the required parameter 'pdf_draw_image_parameters' is set
      if @api_client.config.client_side_validation && pdf_draw_image_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_draw_image_parameters' when calling PDFApi.draw_image"
      end
      # resource path
      local_var_path = '/api/pdf/DrawImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_draw_image_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfDrawImageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#draw_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extracts a page range from a previously uploaded document into one or several new documents.
    # @param pdf_extract_page_parameters [PdfExtractPageParameters] A PdfExtractPageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfExtractPageResponse]
    def extract_page(pdf_extract_page_parameters, opts = {})
      data, _status_code, _headers = extract_page_with_http_info(pdf_extract_page_parameters, opts)
      data
    end

    # Extracts a page range from a previously uploaded document into one or several new documents.
    # @param pdf_extract_page_parameters [PdfExtractPageParameters] A PdfExtractPageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfExtractPageResponse, Integer, Hash)>] PdfExtractPageResponse data, response status code and response headers
    def extract_page_with_http_info(pdf_extract_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.extract_page ...'
      end
      # verify the required parameter 'pdf_extract_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_extract_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_extract_page_parameters' when calling PDFApi.extract_page"
      end
      # resource path
      local_var_path = '/api/pdf/ExtractPage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_extract_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfExtractPageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#extract_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extracts text from the document pages.
    # @param pdf_extract_text_parameters [PdfExtractTextParameters] A PdfExtractTextParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfExtractTextResponse]
    def extract_text(pdf_extract_text_parameters, opts = {})
      data, _status_code, _headers = extract_text_with_http_info(pdf_extract_text_parameters, opts)
      data
    end

    # Extracts text from the document pages.
    # @param pdf_extract_text_parameters [PdfExtractTextParameters] A PdfExtractTextParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfExtractTextResponse, Integer, Hash)>] PdfExtractTextResponse data, response status code and response headers
    def extract_text_with_http_info(pdf_extract_text_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.extract_text ...'
      end
      # verify the required parameter 'pdf_extract_text_parameters' is set
      if @api_client.config.client_side_validation && pdf_extract_text_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_extract_text_parameters' when calling PDFApi.extract_text"
      end
      # resource path
      local_var_path = '/api/pdf/ExtractText'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_extract_text_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfExtractTextResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#extract_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flattens the form-fields, annotations, and/or the layers of a previously uploaded document.
    # @param pdf_flatten_parameters [PdfFlattenParameters] A PdfFlatten object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfFlattenResponse]
    def flatten(pdf_flatten_parameters, opts = {})
      data, _status_code, _headers = flatten_with_http_info(pdf_flatten_parameters, opts)
      data
    end

    # Flattens the form-fields, annotations, and/or the layers of a previously uploaded document.
    # @param pdf_flatten_parameters [PdfFlattenParameters] A PdfFlatten object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfFlattenResponse, Integer, Hash)>] PdfFlattenResponse data, response status code and response headers
    def flatten_with_http_info(pdf_flatten_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.flatten ...'
      end
      # verify the required parameter 'pdf_flatten_parameters' is set
      if @api_client.config.client_side_validation && pdf_flatten_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_flatten_parameters' when calling PDFApi.flatten"
      end
      # resource path
      local_var_path = '/api/pdf/Flatten'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_flatten_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfFlattenResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#flatten\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets information about a previously uploaded document.
    # @param pdf_get_info_parameters [PdfGetInfoParameters] A PdfGetInfoParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfGetInfoResponse]
    def get_info(pdf_get_info_parameters, opts = {})
      data, _status_code, _headers = get_info_with_http_info(pdf_get_info_parameters, opts)
      data
    end

    # Gets information about a previously uploaded document.
    # @param pdf_get_info_parameters [PdfGetInfoParameters] A PdfGetInfoParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfGetInfoResponse, Integer, Hash)>] PdfGetInfoResponse data, response status code and response headers
    def get_info_with_http_info(pdf_get_info_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.get_info ...'
      end
      # verify the required parameter 'pdf_get_info_parameters' is set
      if @api_client.config.client_side_validation && pdf_get_info_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_get_info_parameters' when calling PDFApi.get_info"
      end
      # resource path
      local_var_path = '/api/pdf/GetInfo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_get_info_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfGetInfoResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a thumbnail of each page within the provided page range from a previously uploaded document.
    # @param pdf_get_page_thumbnail_parameters [PdfGetPageThumbnailParameters] A PdfGetPageThumbnailParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfGetPageThumbnailResponse]
    def get_page_thumbnail(pdf_get_page_thumbnail_parameters, opts = {})
      data, _status_code, _headers = get_page_thumbnail_with_http_info(pdf_get_page_thumbnail_parameters, opts)
      data
    end

    # Gets a thumbnail of each page within the provided page range from a previously uploaded document.
    # @param pdf_get_page_thumbnail_parameters [PdfGetPageThumbnailParameters] A PdfGetPageThumbnailParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfGetPageThumbnailResponse, Integer, Hash)>] PdfGetPageThumbnailResponse data, response status code and response headers
    def get_page_thumbnail_with_http_info(pdf_get_page_thumbnail_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.get_page_thumbnail ...'
      end
      # verify the required parameter 'pdf_get_page_thumbnail_parameters' is set
      if @api_client.config.client_side_validation && pdf_get_page_thumbnail_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_get_page_thumbnail_parameters' when calling PDFApi.get_page_thumbnail"
      end
      # resource path
      local_var_path = '/api/pdf/GetPageThumbnail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_get_page_thumbnail_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfGetPageThumbnailResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#get_page_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the supported file extensions by the LoadDocumentAsPDF action.
    # @param [Hash] opts the optional parameters
    # @return [StringArrayResponse]
    def get_pdf_import_supported_file_extensions(opts = {})
      data, _status_code, _headers = get_pdf_import_supported_file_extensions_with_http_info(opts)
      data
    end

    # Gets the supported file extensions by the LoadDocumentAsPDF action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringArrayResponse, Integer, Hash)>] StringArrayResponse data, response status code and response headers
    def get_pdf_import_supported_file_extensions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.get_pdf_import_supported_file_extensions ...'
      end
      # resource path
      local_var_path = '/api/pdf/GetPDFImportSupportedFileExtensions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StringArrayResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#get_pdf_import_supported_file_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inserts an image on a new page of a previously uploaded document.
    # @param pdf_insert_image_parameters [PdfInsertImageParameters] A PdfInsertImageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfInsertImageResponse]
    def insert_image(pdf_insert_image_parameters, opts = {})
      data, _status_code, _headers = insert_image_with_http_info(pdf_insert_image_parameters, opts)
      data
    end

    # Inserts an image on a new page of a previously uploaded document.
    # @param pdf_insert_image_parameters [PdfInsertImageParameters] A PdfInsertImageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfInsertImageResponse, Integer, Hash)>] PdfInsertImageResponse data, response status code and response headers
    def insert_image_with_http_info(pdf_insert_image_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.insert_image ...'
      end
      # verify the required parameter 'pdf_insert_image_parameters' is set
      if @api_client.config.client_side_validation && pdf_insert_image_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_insert_image_parameters' when calling PDFApi.insert_image"
      end
      # resource path
      local_var_path = '/api/pdf/InsertImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_insert_image_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfInsertImageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#insert_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inserts one or more new blank pages to a specific position in a previously uploaded document.
    # @param pdf_insert_new_page_parameters [PdfInsertNewPageParameters] A PdfInsertNewPageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfInsertNewPageResponse]
    def insert_new_page(pdf_insert_new_page_parameters, opts = {})
      data, _status_code, _headers = insert_new_page_with_http_info(pdf_insert_new_page_parameters, opts)
      data
    end

    # Inserts one or more new blank pages to a specific position in a previously uploaded document.
    # @param pdf_insert_new_page_parameters [PdfInsertNewPageParameters] A PdfInsertNewPageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfInsertNewPageResponse, Integer, Hash)>] PdfInsertNewPageResponse data, response status code and response headers
    def insert_new_page_with_http_info(pdf_insert_new_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.insert_new_page ...'
      end
      # verify the required parameter 'pdf_insert_new_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_insert_new_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_insert_new_page_parameters' when calling PDFApi.insert_new_page"
      end
      # resource path
      local_var_path = '/api/pdf/InsertNewPage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_insert_new_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfInsertNewPageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#insert_new_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inserts page number(s) on a document.
    # @param pdf_insert_page_number_parameters [PdfInsertPageNumberParameters] A PdfInsertPageNumberParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfInsertPageNumberResponse]
    def insert_page_number(pdf_insert_page_number_parameters, opts = {})
      data, _status_code, _headers = insert_page_number_with_http_info(pdf_insert_page_number_parameters, opts)
      data
    end

    # Inserts page number(s) on a document.
    # @param pdf_insert_page_number_parameters [PdfInsertPageNumberParameters] A PdfInsertPageNumberParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfInsertPageNumberResponse, Integer, Hash)>] PdfInsertPageNumberResponse data, response status code and response headers
    def insert_page_number_with_http_info(pdf_insert_page_number_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.insert_page_number ...'
      end
      # verify the required parameter 'pdf_insert_page_number_parameters' is set
      if @api_client.config.client_side_validation && pdf_insert_page_number_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_insert_page_number_parameters' when calling PDFApi.insert_page_number"
      end
      # resource path
      local_var_path = '/api/pdf/InsertPageNumber'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_insert_page_number_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfInsertPageNumberResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#insert_page_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inserts text on a document.
    # @param pdf_insert_text_parameters [PdfInsertTextParameters] A PdfInsertTextParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfInsertTextResponse]
    def insert_text(pdf_insert_text_parameters, opts = {})
      data, _status_code, _headers = insert_text_with_http_info(pdf_insert_text_parameters, opts)
      data
    end

    # Inserts text on a document.
    # @param pdf_insert_text_parameters [PdfInsertTextParameters] A PdfInsertTextParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfInsertTextResponse, Integer, Hash)>] PdfInsertTextResponse data, response status code and response headers
    def insert_text_with_http_info(pdf_insert_text_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.insert_text ...'
      end
      # verify the required parameter 'pdf_insert_text_parameters' is set
      if @api_client.config.client_side_validation && pdf_insert_text_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_insert_text_parameters' when calling PDFApi.insert_text"
      end
      # resource path
      local_var_path = '/api/pdf/InsertText'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_insert_text_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfInsertTextResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#insert_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Linearizes a previously uploaded document.
    # @param pdf_linearize_parameters [PdfLinearizeParameters] A PdfLinearizeParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfLinearizeResponse]
    def linearize(pdf_linearize_parameters, opts = {})
      data, _status_code, _headers = linearize_with_http_info(pdf_linearize_parameters, opts)
      data
    end

    # Linearizes a previously uploaded document.
    # @param pdf_linearize_parameters [PdfLinearizeParameters] A PdfLinearizeParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfLinearizeResponse, Integer, Hash)>] PdfLinearizeResponse data, response status code and response headers
    def linearize_with_http_info(pdf_linearize_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.linearize ...'
      end
      # verify the required parameter 'pdf_linearize_parameters' is set
      if @api_client.config.client_side_validation && pdf_linearize_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_linearize_parameters' when calling PDFApi.linearize"
      end
      # resource path
      local_var_path = '/api/pdf/Linearize'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_linearize_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfLinearizeResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#linearize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
    # @param pdf_load_document_from_byte_array_parameters [PdfLoadDocumentFromByteArrayParameters] A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfLoadDocumentResponse]
    def load_document_as_pdf(pdf_load_document_from_byte_array_parameters, opts = {})
      data, _status_code, _headers = load_document_as_pdf_with_http_info(pdf_load_document_from_byte_array_parameters, opts)
      data
    end

    # Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
    # @param pdf_load_document_from_byte_array_parameters [PdfLoadDocumentFromByteArrayParameters] A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfLoadDocumentResponse, Integer, Hash)>] PdfLoadDocumentResponse data, response status code and response headers
    def load_document_as_pdf_with_http_info(pdf_load_document_from_byte_array_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.load_document_as_pdf ...'
      end
      # verify the required parameter 'pdf_load_document_from_byte_array_parameters' is set
      if @api_client.config.client_side_validation && pdf_load_document_from_byte_array_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_load_document_from_byte_array_parameters' when calling PDFApi.load_document_as_pdf"
      end
      # resource path
      local_var_path = '/api/pdf/LoadDocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_load_document_from_byte_array_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfLoadDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#load_document_as_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
    # @param file_data [File] The data of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [PdfLoadDocumentParameters] :load_document_parameters 
    # @return [PdfLoadDocumentResponse]
    def load_document_as_pdf_multipart(file_data, opts = {})
      data, _status_code, _headers = load_document_as_pdf_multipart_with_http_info(file_data, opts)
      data
    end

    # Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
    # @param file_data [File] The data of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [PdfLoadDocumentParameters] :load_document_parameters 
    # @return [Array<(PdfLoadDocumentResponse, Integer, Hash)>] PdfLoadDocumentResponse data, response status code and response headers
    def load_document_as_pdf_multipart_with_http_info(file_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.load_document_as_pdf_multipart ...'
      end
      # verify the required parameter 'file_data' is set
      if @api_client.config.client_side_validation && file_data.nil?
        fail ArgumentError, "Missing the required parameter 'file_data' when calling PDFApi.load_document_as_pdf_multipart"
      end
      # resource path
      local_var_path = '/api/pdf/LoadDocumentAsPDFMultipart'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['fileData'] = file_data
      form_params['loadDocumentParameters'] = opts[:'load_document_parameters'] if !opts[:'load_document_parameters'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PdfLoadDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#load_document_as_pdf_multipart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merges several previously uploaded documents into a new PDF.
    # @param pdf_merge_parameters [PdfMergeParameters] A PdfMergeParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfMergeResponse]
    def merge(pdf_merge_parameters, opts = {})
      data, _status_code, _headers = merge_with_http_info(pdf_merge_parameters, opts)
      data
    end

    # Merges several previously uploaded documents into a new PDF.
    # @param pdf_merge_parameters [PdfMergeParameters] A PdfMergeParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfMergeResponse, Integer, Hash)>] PdfMergeResponse data, response status code and response headers
    def merge_with_http_info(pdf_merge_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.merge ...'
      end
      # verify the required parameter 'pdf_merge_parameters' is set
      if @api_client.config.client_side_validation && pdf_merge_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_merge_parameters' when calling PDFApi.merge"
      end
      # resource path
      local_var_path = '/api/pdf/Merge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_merge_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfMergeResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#merge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merges multiple pages, vertically, within a previously uploaded document into one single page.
    # @param pdf_merge_pages_parameters [PdfMergePagesParameters] A PdfMergePages object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfMergePagesResponse]
    def merge_pages(pdf_merge_pages_parameters, opts = {})
      data, _status_code, _headers = merge_pages_with_http_info(pdf_merge_pages_parameters, opts)
      data
    end

    # Merges multiple pages, vertically, within a previously uploaded document into one single page.
    # @param pdf_merge_pages_parameters [PdfMergePagesParameters] A PdfMergePages object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfMergePagesResponse, Integer, Hash)>] PdfMergePagesResponse data, response status code and response headers
    def merge_pages_with_http_info(pdf_merge_pages_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.merge_pages ...'
      end
      # verify the required parameter 'pdf_merge_pages_parameters' is set
      if @api_client.config.client_side_validation && pdf_merge_pages_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_merge_pages_parameters' when calling PDFApi.merge_pages"
      end
      # resource path
      local_var_path = '/api/pdf/MergePages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_merge_pages_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfMergePagesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#merge_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Moves a page range from a previously uploaded document.
    # @param pdf_move_page_parameters [PdfMovePageParameters] A PdfMovePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfMovePageResponse]
    def move_page(pdf_move_page_parameters, opts = {})
      data, _status_code, _headers = move_page_with_http_info(pdf_move_page_parameters, opts)
      data
    end

    # Moves a page range from a previously uploaded document.
    # @param pdf_move_page_parameters [PdfMovePageParameters] A PdfMovePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfMovePageResponse, Integer, Hash)>] PdfMovePageResponse data, response status code and response headers
    def move_page_with_http_info(pdf_move_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.move_page ...'
      end
      # verify the required parameter 'pdf_move_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_move_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_move_page_parameters' when calling PDFApi.move_page"
      end
      # resource path
      local_var_path = '/api/pdf/MovePage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_move_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfMovePageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#move_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages.
    # @param pdf_ocr_parameters [PdfOCRParameters] A PdfOCRParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfOCRResponse]
    def o_cr(pdf_ocr_parameters, opts = {})
      data, _status_code, _headers = o_cr_with_http_info(pdf_ocr_parameters, opts)
      data
    end

    # Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages.
    # @param pdf_ocr_parameters [PdfOCRParameters] A PdfOCRParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfOCRResponse, Integer, Hash)>] PdfOCRResponse data, response status code and response headers
    def o_cr_with_http_info(pdf_ocr_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.o_cr ...'
      end
      # verify the required parameter 'pdf_ocr_parameters' is set
      if @api_client.config.client_side_validation && pdf_ocr_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_ocr_parameters' when calling PDFApi.o_cr"
      end
      # resource path
      local_var_path = '/api/pdf/OCR'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_ocr_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfOCRResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#o_cr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Protects a previously uploaded document.
    # @param pdf_protect_parameters [PdfProtectParameters] A PdfProtectParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfProtectResponse]
    def protect(pdf_protect_parameters, opts = {})
      data, _status_code, _headers = protect_with_http_info(pdf_protect_parameters, opts)
      data
    end

    # Protects a previously uploaded document.
    # @param pdf_protect_parameters [PdfProtectParameters] A PdfProtectParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfProtectResponse, Integer, Hash)>] PdfProtectResponse data, response status code and response headers
    def protect_with_http_info(pdf_protect_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.protect ...'
      end
      # verify the required parameter 'pdf_protect_parameters' is set
      if @api_client.config.client_side_validation && pdf_protect_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_protect_parameters' when calling PDFApi.protect"
      end
      # resource path
      local_var_path = '/api/pdf/Protect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_protect_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfProtectResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#protect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reads barcodes from a previously uploaded document.
    # @param pdf_read_barcodes_parameters [PdfReadBarcodesParameters] A PdfReadBarcodesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ReadBarcodesResponse]
    def read_barcodes(pdf_read_barcodes_parameters, opts = {})
      data, _status_code, _headers = read_barcodes_with_http_info(pdf_read_barcodes_parameters, opts)
      data
    end

    # Reads barcodes from a previously uploaded document.
    # @param pdf_read_barcodes_parameters [PdfReadBarcodesParameters] A PdfReadBarcodesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReadBarcodesResponse, Integer, Hash)>] ReadBarcodesResponse data, response status code and response headers
    def read_barcodes_with_http_info(pdf_read_barcodes_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.read_barcodes ...'
      end
      # verify the required parameter 'pdf_read_barcodes_parameters' is set
      if @api_client.config.client_side_validation && pdf_read_barcodes_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_read_barcodes_parameters' when calling PDFApi.read_barcodes"
      end
      # resource path
      local_var_path = '/api/pdf/ReadBarcodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_read_barcodes_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ReadBarcodesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#read_barcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reduces the size of a previously uploaded document.
    # @param pdf_reduce_parameters [PdfReduceParameters] A PdfReduceParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfReduceResponse]
    def reduce(pdf_reduce_parameters, opts = {})
      data, _status_code, _headers = reduce_with_http_info(pdf_reduce_parameters, opts)
      data
    end

    # Reduces the size of a previously uploaded document.
    # @param pdf_reduce_parameters [PdfReduceParameters] A PdfReduceParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfReduceResponse, Integer, Hash)>] PdfReduceResponse data, response status code and response headers
    def reduce_with_http_info(pdf_reduce_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.reduce ...'
      end
      # verify the required parameter 'pdf_reduce_parameters' is set
      if @api_client.config.client_side_validation && pdf_reduce_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_reduce_parameters' when calling PDFApi.reduce"
      end
      # resource path
      local_var_path = '/api/pdf/Reduce'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_reduce_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfReduceResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#reduce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes the form fields from a page range of a previously uploaded document.
    # @param pdf_remove_page_form_fields_parameters [PdfRemovePageFormFieldsParameters] A PdfRemovePageFormFieldsParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfRemovePageFormFieldsResponse]
    def remove_page_form_fields(pdf_remove_page_form_fields_parameters, opts = {})
      data, _status_code, _headers = remove_page_form_fields_with_http_info(pdf_remove_page_form_fields_parameters, opts)
      data
    end

    # Removes the form fields from a page range of a previously uploaded document.
    # @param pdf_remove_page_form_fields_parameters [PdfRemovePageFormFieldsParameters] A PdfRemovePageFormFieldsParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfRemovePageFormFieldsResponse, Integer, Hash)>] PdfRemovePageFormFieldsResponse data, response status code and response headers
    def remove_page_form_fields_with_http_info(pdf_remove_page_form_fields_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.remove_page_form_fields ...'
      end
      # verify the required parameter 'pdf_remove_page_form_fields_parameters' is set
      if @api_client.config.client_side_validation && pdf_remove_page_form_fields_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_remove_page_form_fields_parameters' when calling PDFApi.remove_page_form_fields"
      end
      # resource path
      local_var_path = '/api/pdf/RemovePageFormFields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_remove_page_form_fields_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfRemovePageFormFieldsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#remove_page_form_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes text (all text or only invisible one) from a previously uploaded PDF.
    # @param pdf_remove_text_parameters [PdfRemoveTextParameters] A PdfRemoveTextParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfRemoveTextResponse]
    def remove_text(pdf_remove_text_parameters, opts = {})
      data, _status_code, _headers = remove_text_with_http_info(pdf_remove_text_parameters, opts)
      data
    end

    # Removes text (all text or only invisible one) from a previously uploaded PDF.
    # @param pdf_remove_text_parameters [PdfRemoveTextParameters] A PdfRemoveTextParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfRemoveTextResponse, Integer, Hash)>] PdfRemoveTextResponse data, response status code and response headers
    def remove_text_with_http_info(pdf_remove_text_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.remove_text ...'
      end
      # verify the required parameter 'pdf_remove_text_parameters' is set
      if @api_client.config.client_side_validation && pdf_remove_text_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_remove_text_parameters' when calling PDFApi.remove_text"
      end
      # resource path
      local_var_path = '/api/pdf/RemoveText'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_remove_text_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfRemoveTextResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#remove_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorders pages of a previously uploaded document.
    # @param pdf_reorder_pages_parameters [PdfReorderPagesParameters] A PdfReorderPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfReorderPagesResponse]
    def reorder_pages(pdf_reorder_pages_parameters, opts = {})
      data, _status_code, _headers = reorder_pages_with_http_info(pdf_reorder_pages_parameters, opts)
      data
    end

    # Reorders pages of a previously uploaded document.
    # @param pdf_reorder_pages_parameters [PdfReorderPagesParameters] A PdfReorderPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfReorderPagesResponse, Integer, Hash)>] PdfReorderPagesResponse data, response status code and response headers
    def reorder_pages_with_http_info(pdf_reorder_pages_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.reorder_pages ...'
      end
      # verify the required parameter 'pdf_reorder_pages_parameters' is set
      if @api_client.config.client_side_validation && pdf_reorder_pages_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_reorder_pages_parameters' when calling PDFApi.reorder_pages"
      end
      # resource path
      local_var_path = '/api/pdf/ReorderPages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_reorder_pages_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfReorderPagesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#reorder_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Repairs a previously uploaded PDF document.
    # @param pdf_repair_document_parameters [PdfRepairDocumentParameters] A PdfRepairDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfRepairDocumentResponse]
    def repair_document(pdf_repair_document_parameters, opts = {})
      data, _status_code, _headers = repair_document_with_http_info(pdf_repair_document_parameters, opts)
      data
    end

    # Repairs a previously uploaded PDF document.
    # @param pdf_repair_document_parameters [PdfRepairDocumentParameters] A PdfRepairDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfRepairDocumentResponse, Integer, Hash)>] PdfRepairDocumentResponse data, response status code and response headers
    def repair_document_with_http_info(pdf_repair_document_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.repair_document ...'
      end
      # verify the required parameter 'pdf_repair_document_parameters' is set
      if @api_client.config.client_side_validation && pdf_repair_document_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_repair_document_parameters' when calling PDFApi.repair_document"
      end
      # resource path
      local_var_path = '/api/pdf/RepairDocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_repair_document_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfRepairDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#repair_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rotates (standardly) a page range from a previously uploaded document.
    # @param pdf_rotate_page_standard_parameters [PdfRotatePageStandardParameters] A PdfRotatePageStandardParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfRotatePageStandardResponse]
    def rotate_page_standard(pdf_rotate_page_standard_parameters, opts = {})
      data, _status_code, _headers = rotate_page_standard_with_http_info(pdf_rotate_page_standard_parameters, opts)
      data
    end

    # Rotates (standardly) a page range from a previously uploaded document.
    # @param pdf_rotate_page_standard_parameters [PdfRotatePageStandardParameters] A PdfRotatePageStandardParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfRotatePageStandardResponse, Integer, Hash)>] PdfRotatePageStandardResponse data, response status code and response headers
    def rotate_page_standard_with_http_info(pdf_rotate_page_standard_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.rotate_page_standard ...'
      end
      # verify the required parameter 'pdf_rotate_page_standard_parameters' is set
      if @api_client.config.client_side_validation && pdf_rotate_page_standard_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_rotate_page_standard_parameters' when calling PDFApi.rotate_page_standard"
      end
      # resource path
      local_var_path = '/api/pdf/RotatePageStandard'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_rotate_page_standard_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfRotatePageStandardResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#rotate_page_standard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as JPEG, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_jpeg_parameters [PdfSaveAsJPEGParameters] A PdfSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSaveAsJPEGResponse]
    def save_as_jpeg(pdf_save_as_jpeg_parameters, opts = {})
      data, _status_code, _headers = save_as_jpeg_with_http_info(pdf_save_as_jpeg_parameters, opts)
      data
    end

    # Saves a previously uploaded document as JPEG, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_jpeg_parameters [PdfSaveAsJPEGParameters] A PdfSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSaveAsJPEGResponse, Integer, Hash)>] PdfSaveAsJPEGResponse data, response status code and response headers
    def save_as_jpeg_with_http_info(pdf_save_as_jpeg_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_jpeg ...'
      end
      # verify the required parameter 'pdf_save_as_jpeg_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_jpeg_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_jpeg_parameters' when calling PDFApi.save_as_jpeg"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsJPEG'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_jpeg_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSaveAsJPEGResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_jpeg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as JPEG, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_jpeg_parameters [PdfSaveAsJPEGParameters] A PdfSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def save_as_jpeg_file(pdf_save_as_jpeg_parameters, opts = {})
      data, _status_code, _headers = save_as_jpeg_file_with_http_info(pdf_save_as_jpeg_parameters, opts)
      data
    end

    # Saves a previously uploaded document as JPEG, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_jpeg_parameters [PdfSaveAsJPEGParameters] A PdfSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def save_as_jpeg_file_with_http_info(pdf_save_as_jpeg_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_jpeg_file ...'
      end
      # verify the required parameter 'pdf_save_as_jpeg_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_jpeg_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_jpeg_parameters' when calling PDFApi.save_as_jpeg_file"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsJPEGFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_jpeg_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_jpeg_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as PNG, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_png_parameters [PdfSaveAsPNGParameters] A PdfSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSaveAsPNGResponse]
    def save_as_png(pdf_save_as_png_parameters, opts = {})
      data, _status_code, _headers = save_as_png_with_http_info(pdf_save_as_png_parameters, opts)
      data
    end

    # Saves a previously uploaded document as PNG, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_png_parameters [PdfSaveAsPNGParameters] A PdfSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSaveAsPNGResponse, Integer, Hash)>] PdfSaveAsPNGResponse data, response status code and response headers
    def save_as_png_with_http_info(pdf_save_as_png_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_png ...'
      end
      # verify the required parameter 'pdf_save_as_png_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_png_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_png_parameters' when calling PDFApi.save_as_png"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsPNG'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_png_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSaveAsPNGResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_png\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as PNG, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_png_parameters [PdfSaveAsPNGParameters] A PdfSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def save_as_png_file(pdf_save_as_png_parameters, opts = {})
      data, _status_code, _headers = save_as_png_file_with_http_info(pdf_save_as_png_parameters, opts)
      data
    end

    # Saves a previously uploaded document as PNG, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_png_parameters [PdfSaveAsPNGParameters] A PdfSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def save_as_png_file_with_http_info(pdf_save_as_png_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_png_file ...'
      end
      # verify the required parameter 'pdf_save_as_png_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_png_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_png_parameters' when calling PDFApi.save_as_png_file"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsPNGFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_png_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_png_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as TIFF, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_tiff_parameters [PdfSaveAsTIFFParameters] A PdfSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSaveAsTIFFResponse]
    def save_as_tiff(pdf_save_as_tiff_parameters, opts = {})
      data, _status_code, _headers = save_as_tiff_with_http_info(pdf_save_as_tiff_parameters, opts)
      data
    end

    # Saves a previously uploaded document as TIFF, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_tiff_parameters [PdfSaveAsTIFFParameters] A PdfSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSaveAsTIFFResponse, Integer, Hash)>] PdfSaveAsTIFFResponse data, response status code and response headers
    def save_as_tiff_with_http_info(pdf_save_as_tiff_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_tiff ...'
      end
      # verify the required parameter 'pdf_save_as_tiff_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_tiff_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_tiff_parameters' when calling PDFApi.save_as_tiff"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsTIFF'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_tiff_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSaveAsTIFFResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_tiff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_tiff_parameters [PdfSaveAsTIFFParameters] A PdfSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def save_as_tiff_file(pdf_save_as_tiff_parameters, opts = {})
      data, _status_code, _headers = save_as_tiff_file_with_http_info(pdf_save_as_tiff_parameters, opts)
      data
    end

    # Saves a previously uploaded document as TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_tiff_parameters [PdfSaveAsTIFFParameters] A PdfSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def save_as_tiff_file_with_http_info(pdf_save_as_tiff_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_tiff_file ...'
      end
      # verify the required parameter 'pdf_save_as_tiff_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_tiff_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_tiff_parameters' when calling PDFApi.save_as_tiff_file"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsTIFFFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_tiff_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_tiff_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as multipage TIFF, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_tiff_multipage_parameters [PdfSaveAsTIFFMultipageParameters] A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSaveAsTIFFMultipageResponse]
    def save_as_tiff_multipage(pdf_save_as_tiff_multipage_parameters, opts = {})
      data, _status_code, _headers = save_as_tiff_multipage_with_http_info(pdf_save_as_tiff_multipage_parameters, opts)
      data
    end

    # Saves a previously uploaded document as multipage TIFF, and sends the file data in a JSON-serialized object.
    # @param pdf_save_as_tiff_multipage_parameters [PdfSaveAsTIFFMultipageParameters] A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSaveAsTIFFMultipageResponse, Integer, Hash)>] PdfSaveAsTIFFMultipageResponse data, response status code and response headers
    def save_as_tiff_multipage_with_http_info(pdf_save_as_tiff_multipage_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_tiff_multipage ...'
      end
      # verify the required parameter 'pdf_save_as_tiff_multipage_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_tiff_multipage_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_tiff_multipage_parameters' when calling PDFApi.save_as_tiff_multipage"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsTIFFMultipage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_tiff_multipage_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSaveAsTIFFMultipageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_tiff_multipage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_tiff_multipage_parameters [PdfSaveAsTIFFMultipageParameters] A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def save_as_tiff_multipage_file(pdf_save_as_tiff_multipage_parameters, opts = {})
      data, _status_code, _headers = save_as_tiff_multipage_file_with_http_info(pdf_save_as_tiff_multipage_parameters, opts)
      data
    end

    # Saves a previously uploaded document as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_as_tiff_multipage_parameters [PdfSaveAsTIFFMultipageParameters] A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def save_as_tiff_multipage_file_with_http_info(pdf_save_as_tiff_multipage_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_as_tiff_multipage_file ...'
      end
      # verify the required parameter 'pdf_save_as_tiff_multipage_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_as_tiff_multipage_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_as_tiff_multipage_parameters' when calling PDFApi.save_as_tiff_multipage_file"
      end
      # resource path
      local_var_path = '/api/pdf/SaveAsTIFFMultipageFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_as_tiff_multipage_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_as_tiff_multipage_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as PDF, and sends the file data in a JSON-serialized object.
    # @param pdf_save_document_parameters [PdfSaveDocumentParameters] A PdfSaveDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSaveDocumentResponse]
    def save_document(pdf_save_document_parameters, opts = {})
      data, _status_code, _headers = save_document_with_http_info(pdf_save_document_parameters, opts)
      data
    end

    # Saves a previously uploaded document as PDF, and sends the file data in a JSON-serialized object.
    # @param pdf_save_document_parameters [PdfSaveDocumentParameters] A PdfSaveDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSaveDocumentResponse, Integer, Hash)>] PdfSaveDocumentResponse data, response status code and response headers
    def save_document_with_http_info(pdf_save_document_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_document ...'
      end
      # verify the required parameter 'pdf_save_document_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_document_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_document_parameters' when calling PDFApi.save_document"
      end
      # resource path
      local_var_path = '/api/pdf/SaveDocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_document_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSaveDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded document as PDF, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_document_parameters [PdfSaveDocumentParameters] A PdfSaveDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def save_document_to_file(pdf_save_document_parameters, opts = {})
      data, _status_code, _headers = save_document_to_file_with_http_info(pdf_save_document_parameters, opts)
      data
    end

    # Saves a previously uploaded document as PDF, and streams the file binary data to the response (this is the most efficient download method).
    # @param pdf_save_document_parameters [PdfSaveDocumentParameters] A PdfSaveDocumentParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def save_document_to_file_with_http_info(pdf_save_document_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.save_document_to_file ...'
      end
      # verify the required parameter 'pdf_save_document_parameters' is set
      if @api_client.config.client_side_validation && pdf_save_document_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_save_document_parameters' when calling PDFApi.save_document_to_file"
      end
      # resource path
      local_var_path = '/api/pdf/SaveDocumentToFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_save_document_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#save_document_to_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Scales a page range from a previously uploaded document.
    # @param pdf_scale_page_parameters [PdfScalePageParameters] A PdfScalePage object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfScalePageResponse]
    def scale_page(pdf_scale_page_parameters, opts = {})
      data, _status_code, _headers = scale_page_with_http_info(pdf_scale_page_parameters, opts)
      data
    end

    # Scales a page range from a previously uploaded document.
    # @param pdf_scale_page_parameters [PdfScalePageParameters] A PdfScalePage object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfScalePageResponse, Integer, Hash)>] PdfScalePageResponse data, response status code and response headers
    def scale_page_with_http_info(pdf_scale_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.scale_page ...'
      end
      # verify the required parameter 'pdf_scale_page_parameters' is set
      if @api_client.config.client_side_validation && pdf_scale_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_scale_page_parameters' when calling PDFApi.scale_page"
      end
      # resource path
      local_var_path = '/api/pdf/ScalePage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_scale_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfScalePageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#scale_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets information to a previously uploaded document.
    # @param pdf_set_info_parameters [PdfSetInfoParameters] A PdfSetInfoParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSetInfoResponse]
    def set_info(pdf_set_info_parameters, opts = {})
      data, _status_code, _headers = set_info_with_http_info(pdf_set_info_parameters, opts)
      data
    end

    # Sets information to a previously uploaded document.
    # @param pdf_set_info_parameters [PdfSetInfoParameters] A PdfSetInfoParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSetInfoResponse, Integer, Hash)>] PdfSetInfoResponse data, response status code and response headers
    def set_info_with_http_info(pdf_set_info_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.set_info ...'
      end
      # verify the required parameter 'pdf_set_info_parameters' is set
      if @api_client.config.client_side_validation && pdf_set_info_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_set_info_parameters' when calling PDFApi.set_info"
      end
      # resource path
      local_var_path = '/api/pdf/SetInfo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_set_info_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSetInfoResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#set_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets various document level initial view options to a previously uploaded document.
    # @param pdf_set_initial_view_parameters [PdfSetInitialViewParameters] A PdfsetInitialViewParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSetInitialViewResponse]
    def set_initial_view(pdf_set_initial_view_parameters, opts = {})
      data, _status_code, _headers = set_initial_view_with_http_info(pdf_set_initial_view_parameters, opts)
      data
    end

    # Sets various document level initial view options to a previously uploaded document.
    # @param pdf_set_initial_view_parameters [PdfSetInitialViewParameters] A PdfsetInitialViewParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSetInitialViewResponse, Integer, Hash)>] PdfSetInitialViewResponse data, response status code and response headers
    def set_initial_view_with_http_info(pdf_set_initial_view_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.set_initial_view ...'
      end
      # verify the required parameter 'pdf_set_initial_view_parameters' is set
      if @api_client.config.client_side_validation && pdf_set_initial_view_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_set_initial_view_parameters' when calling PDFApi.set_initial_view"
      end
      # resource path
      local_var_path = '/api/pdf/SetInitialView'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_set_initial_view_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSetInitialViewResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#set_initial_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets pagebox to a page range from previously uploaded document.
    # @param pdf_set_page_box_parameters [PdfSetPageBoxParameters] A PdfSetPageBoxParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSetPageBoxResponse]
    def set_page_box(pdf_set_page_box_parameters, opts = {})
      data, _status_code, _headers = set_page_box_with_http_info(pdf_set_page_box_parameters, opts)
      data
    end

    # Sets pagebox to a page range from previously uploaded document.
    # @param pdf_set_page_box_parameters [PdfSetPageBoxParameters] A PdfSetPageBoxParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSetPageBoxResponse, Integer, Hash)>] PdfSetPageBoxResponse data, response status code and response headers
    def set_page_box_with_http_info(pdf_set_page_box_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.set_page_box ...'
      end
      # verify the required parameter 'pdf_set_page_box_parameters' is set
      if @api_client.config.client_side_validation && pdf_set_page_box_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_set_page_box_parameters' when calling PDFApi.set_page_box"
      end
      # resource path
      local_var_path = '/api/pdf/SetPageBox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_set_page_box_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSetPageBoxResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#set_page_box\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unprotects a previously uploaded document.
    # @param pdf_set_password_parameters [PdfSetPasswordParameters] A PdfSetPasswordParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSetPasswordResponse]
    def set_password(pdf_set_password_parameters, opts = {})
      data, _status_code, _headers = set_password_with_http_info(pdf_set_password_parameters, opts)
      data
    end

    # Unprotects a previously uploaded document.
    # @param pdf_set_password_parameters [PdfSetPasswordParameters] A PdfSetPasswordParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSetPasswordResponse, Integer, Hash)>] PdfSetPasswordResponse data, response status code and response headers
    def set_password_with_http_info(pdf_set_password_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.set_password ...'
      end
      # verify the required parameter 'pdf_set_password_parameters' is set
      if @api_client.config.client_side_validation && pdf_set_password_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_set_password_parameters' when calling PDFApi.set_password"
      end
      # resource path
      local_var_path = '/api/pdf/SetPassword'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_set_password_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSetPasswordResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#set_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Splits a previously uploaded document into new ones.
    # @param pdf_split_parameters [PdfSplitParameters] A PdfSplitParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSplitResponse]
    def split(pdf_split_parameters, opts = {})
      data, _status_code, _headers = split_with_http_info(pdf_split_parameters, opts)
      data
    end

    # Splits a previously uploaded document into new ones.
    # @param pdf_split_parameters [PdfSplitParameters] A PdfSplitParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSplitResponse, Integer, Hash)>] PdfSplitResponse data, response status code and response headers
    def split_with_http_info(pdf_split_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.split ...'
      end
      # verify the required parameter 'pdf_split_parameters' is set
      if @api_client.config.client_side_validation && pdf_split_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_split_parameters' when calling PDFApi.split"
      end
      # resource path
      local_var_path = '/api/pdf/Split'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_split_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSplitResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#split\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Swaps two pages from a previously uploaded document.
    # @param pdf_swap_pages_parameters [PdfSwapPagesParameters] A PdfSwapPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfSwapPagesResponse]
    def swap_pages(pdf_swap_pages_parameters, opts = {})
      data, _status_code, _headers = swap_pages_with_http_info(pdf_swap_pages_parameters, opts)
      data
    end

    # Swaps two pages from a previously uploaded document.
    # @param pdf_swap_pages_parameters [PdfSwapPagesParameters] A PdfSwapPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfSwapPagesResponse, Integer, Hash)>] PdfSwapPagesResponse data, response status code and response headers
    def swap_pages_with_http_info(pdf_swap_pages_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.swap_pages ...'
      end
      # verify the required parameter 'pdf_swap_pages_parameters' is set
      if @api_client.config.client_side_validation && pdf_swap_pages_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_swap_pages_parameters' when calling PDFApi.swap_pages"
      end
      # resource path
      local_var_path = '/api/pdf/SwapPages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_swap_pages_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfSwapPagesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#swap_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unprotects a previously uploaded document.
    # @param pdf_unprotect_parameters [PdfUnprotectParameters] A PdfUnprotectParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [PdfUnprotectResponse]
    def unprotect(pdf_unprotect_parameters, opts = {})
      data, _status_code, _headers = unprotect_with_http_info(pdf_unprotect_parameters, opts)
      data
    end

    # Unprotects a previously uploaded document.
    # @param pdf_unprotect_parameters [PdfUnprotectParameters] A PdfUnprotectParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PdfUnprotectResponse, Integer, Hash)>] PdfUnprotectResponse data, response status code and response headers
    def unprotect_with_http_info(pdf_unprotect_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PDFApi.unprotect ...'
      end
      # verify the required parameter 'pdf_unprotect_parameters' is set
      if @api_client.config.client_side_validation && pdf_unprotect_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'pdf_unprotect_parameters' when calling PDFApi.unprotect"
      end
      # resource path
      local_var_path = '/api/pdf/Unprotect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pdf_unprotect_parameters) 

      # return_type
      return_type = opts[:return_type] || 'PdfUnprotectResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PDFApi#unprotect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
