=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ImageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adjusts a previously uploaded image.
    # @param image_adjust_parameters [ImageAdjustParameters] An ImageAdjustParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageAdjustResponse]
    def image_adjust(image_adjust_parameters, opts = {})
      data, _status_code, _headers = image_adjust_with_http_info(image_adjust_parameters, opts)
      data
    end

    # Adjusts a previously uploaded image.
    # @param image_adjust_parameters [ImageAdjustParameters] An ImageAdjustParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageAdjustResponse, Integer, Hash)>] ImageAdjustResponse data, response status code and response headers
    def image_adjust_with_http_info(image_adjust_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_adjust ...'
      end
      # verify the required parameter 'image_adjust_parameters' is set
      if @api_client.config.client_side_validation && image_adjust_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_adjust_parameters' when calling ImageApi.image_adjust"
      end
      # resource path
      local_var_path = '/api/image/ImageAdjust'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_adjust_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageAdjustResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_adjust\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Automatically crops a previously uploaded image.
    # @param image_auto_crop_parameters [ImageAutoCropParameters] An ImageAutoCropParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageAutoCropResponse]
    def image_auto_crop(image_auto_crop_parameters, opts = {})
      data, _status_code, _headers = image_auto_crop_with_http_info(image_auto_crop_parameters, opts)
      data
    end

    # Automatically crops a previously uploaded image.
    # @param image_auto_crop_parameters [ImageAutoCropParameters] An ImageAutoCropParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageAutoCropResponse, Integer, Hash)>] ImageAutoCropResponse data, response status code and response headers
    def image_auto_crop_with_http_info(image_auto_crop_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_auto_crop ...'
      end
      # verify the required parameter 'image_auto_crop_parameters' is set
      if @api_client.config.client_side_validation && image_auto_crop_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_auto_crop_parameters' when calling ImageApi.image_auto_crop"
      end
      # resource path
      local_var_path = '/api/image/ImageAutoCrop'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_auto_crop_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageAutoCropResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_auto_crop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cleanup a previously uploaded image.
    # @param image_cleanup_document_parameters [ImageCleanupDocumentParameters] An ImageCleanupDocumentParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageCleanupDocumentResponse]
    def image_cleanup_document(image_cleanup_document_parameters, opts = {})
      data, _status_code, _headers = image_cleanup_document_with_http_info(image_cleanup_document_parameters, opts)
      data
    end

    # Cleanup a previously uploaded image.
    # @param image_cleanup_document_parameters [ImageCleanupDocumentParameters] An ImageCleanupDocumentParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageCleanupDocumentResponse, Integer, Hash)>] ImageCleanupDocumentResponse data, response status code and response headers
    def image_cleanup_document_with_http_info(image_cleanup_document_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_cleanup_document ...'
      end
      # verify the required parameter 'image_cleanup_document_parameters' is set
      if @api_client.config.client_side_validation && image_cleanup_document_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_cleanup_document_parameters' when calling ImageApi.image_cleanup_document"
      end
      # resource path
      local_var_path = '/api/image/ImageCleanupDocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_cleanup_document_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageCleanupDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_cleanup_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clones regions from a previously uploaded image into new images.
    # @param image_clone_regions_parameters [ImageCloneRegionsParameters] An ImageCloneRegionsParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageCloneRegionsResponse]
    def image_clone_regions(image_clone_regions_parameters, opts = {})
      data, _status_code, _headers = image_clone_regions_with_http_info(image_clone_regions_parameters, opts)
      data
    end

    # Clones regions from a previously uploaded image into new images.
    # @param image_clone_regions_parameters [ImageCloneRegionsParameters] An ImageCloneRegionsParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageCloneRegionsResponse, Integer, Hash)>] ImageCloneRegionsResponse data, response status code and response headers
    def image_clone_regions_with_http_info(image_clone_regions_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_clone_regions ...'
      end
      # verify the required parameter 'image_clone_regions_parameters' is set
      if @api_client.config.client_side_validation && image_clone_regions_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_clone_regions_parameters' when calling ImageApi.image_clone_regions"
      end
      # resource path
      local_var_path = '/api/image/ImageCloneRegions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_clone_regions_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageCloneRegionsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_clone_regions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Closes a previously uploaded image.
    # @param image_close_parameters [ImageCloseParameters] An ImageCloseParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageCloseResponse]
    def image_close(image_close_parameters, opts = {})
      data, _status_code, _headers = image_close_with_http_info(image_close_parameters, opts)
      data
    end

    # Closes a previously uploaded image.
    # @param image_close_parameters [ImageCloseParameters] An ImageCloseParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageCloseResponse, Integer, Hash)>] ImageCloseResponse data, response status code and response headers
    def image_close_with_http_info(image_close_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_close ...'
      end
      # verify the required parameter 'image_close_parameters' is set
      if @api_client.config.client_side_validation && image_close_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_close_parameters' when calling ImageApi.image_close"
      end
      # resource path
      local_var_path = '/api/image/ImageClose'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_close_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageCloseResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_close\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Converts the color depth of a previously uploaded image.
    # @param image_convert_color_depth_parameters [ImageConvertColorDepthParameters] An ImageConvertColorDepthParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageConvertColorDepthResponse]
    def image_convert_color_depth(image_convert_color_depth_parameters, opts = {})
      data, _status_code, _headers = image_convert_color_depth_with_http_info(image_convert_color_depth_parameters, opts)
      data
    end

    # Converts the color depth of a previously uploaded image.
    # @param image_convert_color_depth_parameters [ImageConvertColorDepthParameters] An ImageConvertColorDepthParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageConvertColorDepthResponse, Integer, Hash)>] ImageConvertColorDepthResponse data, response status code and response headers
    def image_convert_color_depth_with_http_info(image_convert_color_depth_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_convert_color_depth ...'
      end
      # verify the required parameter 'image_convert_color_depth_parameters' is set
      if @api_client.config.client_side_validation && image_convert_color_depth_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_convert_color_depth_parameters' when calling ImageApi.image_convert_color_depth"
      end
      # resource path
      local_var_path = '/api/image/ImageConvertColorDepth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_convert_color_depth_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageConvertColorDepthResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_convert_color_depth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Crops a previously uploaded image.
    # @param image_crop_parameters [ImageCropParameters] An ImageCropParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageCropResponse]
    def image_crop(image_crop_parameters, opts = {})
      data, _status_code, _headers = image_crop_with_http_info(image_crop_parameters, opts)
      data
    end

    # Crops a previously uploaded image.
    # @param image_crop_parameters [ImageCropParameters] An ImageCropParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageCropResponse, Integer, Hash)>] ImageCropResponse data, response status code and response headers
    def image_crop_with_http_info(image_crop_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_crop ...'
      end
      # verify the required parameter 'image_crop_parameters' is set
      if @api_client.config.client_side_validation && image_crop_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_crop_parameters' when calling ImageApi.image_crop"
      end
      # resource path
      local_var_path = '/api/image/ImageCrop'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_crop_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageCropResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_crop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a page range from a previously uploaded image.
    # @param image_delete_page_parameters [ImageDeletePageParameters] An ImageDeletePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageDeletePageResponse]
    def image_delete_page(image_delete_page_parameters, opts = {})
      data, _status_code, _headers = image_delete_page_with_http_info(image_delete_page_parameters, opts)
      data
    end

    # Deletes a page range from a previously uploaded image.
    # @param image_delete_page_parameters [ImageDeletePageParameters] An ImageDeletePageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageDeletePageResponse, Integer, Hash)>] ImageDeletePageResponse data, response status code and response headers
    def image_delete_page_with_http_info(image_delete_page_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_delete_page ...'
      end
      # verify the required parameter 'image_delete_page_parameters' is set
      if @api_client.config.client_side_validation && image_delete_page_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_delete_page_parameters' when calling ImageApi.image_delete_page"
      end
      # resource path
      local_var_path = '/api/image/ImageDeletePage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_delete_page_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageDeletePageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_delete_page\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detects the blank page(s) from a previously uploaded image and offers to remove them.
    # @param image_detect_blank_pages_parameters [ImageDetectBlankPagesParameters] An ImageDetectBlankPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageDetectBlankPagesResponse]
    def image_detect_blank_pages(image_detect_blank_pages_parameters, opts = {})
      data, _status_code, _headers = image_detect_blank_pages_with_http_info(image_detect_blank_pages_parameters, opts)
      data
    end

    # Detects the blank page(s) from a previously uploaded image and offers to remove them.
    # @param image_detect_blank_pages_parameters [ImageDetectBlankPagesParameters] An ImageDetectBlankPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageDetectBlankPagesResponse, Integer, Hash)>] ImageDetectBlankPagesResponse data, response status code and response headers
    def image_detect_blank_pages_with_http_info(image_detect_blank_pages_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_detect_blank_pages ...'
      end
      # verify the required parameter 'image_detect_blank_pages_parameters' is set
      if @api_client.config.client_side_validation && image_detect_blank_pages_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_detect_blank_pages_parameters' when calling ImageApi.image_detect_blank_pages"
      end
      # resource path
      local_var_path = '/api/image/ImageDetectBlankPages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_detect_blank_pages_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageDetectBlankPagesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_detect_blank_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Performs color detection  on a previously uploaded image.
    # @param image_detect_color_parameters [ImageDetectColorParameters] An ImageDetectColorParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageDetectColorResponse]
    def image_detect_color(image_detect_color_parameters, opts = {})
      data, _status_code, _headers = image_detect_color_with_http_info(image_detect_color_parameters, opts)
      data
    end

    # Performs color detection  on a previously uploaded image.
    # @param image_detect_color_parameters [ImageDetectColorParameters] An ImageDetectColorParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageDetectColorResponse, Integer, Hash)>] ImageDetectColorResponse data, response status code and response headers
    def image_detect_color_with_http_info(image_detect_color_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_detect_color ...'
      end
      # verify the required parameter 'image_detect_color_parameters' is set
      if @api_client.config.client_side_validation && image_detect_color_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_detect_color_parameters' when calling ImageApi.image_detect_color"
      end
      # resource path
      local_var_path = '/api/image/ImageDetectColor'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_detect_color_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageDetectColorResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_detect_color\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them.
    # @param image_detect_page_orientation_parameters [ImageDetectPageOrientationParameters] An ImagedetectPageOrientationParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageDetectPageOrientationResponse]
    def image_detect_page_orientation(image_detect_page_orientation_parameters, opts = {})
      data, _status_code, _headers = image_detect_page_orientation_with_http_info(image_detect_page_orientation_parameters, opts)
      data
    end

    # Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them.
    # @param image_detect_page_orientation_parameters [ImageDetectPageOrientationParameters] An ImagedetectPageOrientationParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageDetectPageOrientationResponse, Integer, Hash)>] ImageDetectPageOrientationResponse data, response status code and response headers
    def image_detect_page_orientation_with_http_info(image_detect_page_orientation_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_detect_page_orientation ...'
      end
      # verify the required parameter 'image_detect_page_orientation_parameters' is set
      if @api_client.config.client_side_validation && image_detect_page_orientation_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_detect_page_orientation_parameters' when calling ImageApi.image_detect_page_orientation"
      end
      # resource path
      local_var_path = '/api/image/ImageDetectPageOrientation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_detect_page_orientation_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageDetectPageOrientationResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_detect_page_orientation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Applies filters to a previously uploaded image.
    # @param image_filter_parameters [ImageFilterParameters] An ImageFilterParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageFilterResponse]
    def image_filter(image_filter_parameters, opts = {})
      data, _status_code, _headers = image_filter_with_http_info(image_filter_parameters, opts)
      data
    end

    # Applies filters to a previously uploaded image.
    # @param image_filter_parameters [ImageFilterParameters] An ImageFilterParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageFilterResponse, Integer, Hash)>] ImageFilterResponse data, response status code and response headers
    def image_filter_with_http_info(image_filter_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_filter ...'
      end
      # verify the required parameter 'image_filter_parameters' is set
      if @api_client.config.client_side_validation && image_filter_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_filter_parameters' when calling ImageApi.image_filter"
      end
      # resource path
      local_var_path = '/api/image/ImageFilter'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_filter_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageFilterResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a thumbnail of each page within the provided page range from a previously uploaded image.
    # @param image_get_page_thumbnail_parameters [ImageGetPageThumbnailParameters] A PDFGetPageThumbnailParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageGetPageThumbnailResponse]
    def image_get_page_thumbnail(image_get_page_thumbnail_parameters, opts = {})
      data, _status_code, _headers = image_get_page_thumbnail_with_http_info(image_get_page_thumbnail_parameters, opts)
      data
    end

    # Gets a thumbnail of each page within the provided page range from a previously uploaded image.
    # @param image_get_page_thumbnail_parameters [ImageGetPageThumbnailParameters] A PDFGetPageThumbnailParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageGetPageThumbnailResponse, Integer, Hash)>] ImageGetPageThumbnailResponse data, response status code and response headers
    def image_get_page_thumbnail_with_http_info(image_get_page_thumbnail_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_get_page_thumbnail ...'
      end
      # verify the required parameter 'image_get_page_thumbnail_parameters' is set
      if @api_client.config.client_side_validation && image_get_page_thumbnail_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_get_page_thumbnail_parameters' when calling ImageApi.image_get_page_thumbnail"
      end
      # resource path
      local_var_path = '/api/image/ImageGetPageThumbnail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_get_page_thumbnail_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageGetPageThumbnailResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_get_page_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the supported file extensions by the image loading actions.
    # @param [Hash] opts the optional parameters
    # @return [StringArrayResponse]
    def image_get_supported_file_extensions(opts = {})
      data, _status_code, _headers = image_get_supported_file_extensions_with_http_info(opts)
      data
    end

    # Gets the supported file extensions by the image loading actions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringArrayResponse, Integer, Hash)>] StringArrayResponse data, response status code and response headers
    def image_get_supported_file_extensions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_get_supported_file_extensions ...'
      end
      # resource path
      local_var_path = '/api/image/ImageGetSupportedFileExtensions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StringArrayResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_get_supported_file_extensions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
    # @param load_image_from_byte_array_parameters [LoadImageFromByteArrayParameters] A LoadImageFromByteArrayParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageLoadResponse]
    def image_load(load_image_from_byte_array_parameters, opts = {})
      data, _status_code, _headers = image_load_with_http_info(load_image_from_byte_array_parameters, opts)
      data
    end

    # Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
    # @param load_image_from_byte_array_parameters [LoadImageFromByteArrayParameters] A LoadImageFromByteArrayParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageLoadResponse, Integer, Hash)>] ImageLoadResponse data, response status code and response headers
    def image_load_with_http_info(load_image_from_byte_array_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_load ...'
      end
      # verify the required parameter 'load_image_from_byte_array_parameters' is set
      if @api_client.config.client_side_validation && load_image_from_byte_array_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'load_image_from_byte_array_parameters' when calling ImageApi.image_load"
      end
      # resource path
      local_var_path = '/api/image/ImageLoad'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(load_image_from_byte_array_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageLoadResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_load\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
    # @param file_data [File] The data of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [LoadImageParameters] :load_image_parameters 
    # @return [ImageLoadResponse]
    def image_load_multipart(file_data, opts = {})
      data, _status_code, _headers = image_load_multipart_with_http_info(file_data, opts)
      data
    end

    # Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
    # @param file_data [File] The data of the document.
    # @param [Hash] opts the optional parameters
    # @option opts [LoadImageParameters] :load_image_parameters 
    # @return [Array<(ImageLoadResponse, Integer, Hash)>] ImageLoadResponse data, response status code and response headers
    def image_load_multipart_with_http_info(file_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_load_multipart ...'
      end
      # verify the required parameter 'file_data' is set
      if @api_client.config.client_side_validation && file_data.nil?
        fail ArgumentError, "Missing the required parameter 'file_data' when calling ImageApi.image_load_multipart"
      end
      # resource path
      local_var_path = '/api/image/ImageLoadMultipart'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['fileData'] = file_data
      form_params['loadImageParameters'] = opts[:'load_image_parameters'] if !opts[:'load_image_parameters'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImageLoadResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_load_multipart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image.
    # @param image_micr_parameters [ImageMICRParameters] An ImageMICRParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageMICRResponse]
    def image_micr(image_micr_parameters, opts = {})
      data, _status_code, _headers = image_micr_with_http_info(image_micr_parameters, opts)
      data
    end

    # Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image.
    # @param image_micr_parameters [ImageMICRParameters] An ImageMICRParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageMICRResponse, Integer, Hash)>] ImageMICRResponse data, response status code and response headers
    def image_micr_with_http_info(image_micr_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_micr ...'
      end
      # verify the required parameter 'image_micr_parameters' is set
      if @api_client.config.client_side_validation && image_micr_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_micr_parameters' when calling ImageApi.image_micr"
      end
      # resource path
      local_var_path = '/api/image/ImageMICR'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_micr_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageMICRResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_micr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reads barcodes from a previously uploaded image.
    # @param image_read_barcodes_parameters [ImageReadBarcodesParameters] An ImageReadBarcodesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ReadBarcodesResponse]
    def image_read_barcodes(image_read_barcodes_parameters, opts = {})
      data, _status_code, _headers = image_read_barcodes_with_http_info(image_read_barcodes_parameters, opts)
      data
    end

    # Reads barcodes from a previously uploaded image.
    # @param image_read_barcodes_parameters [ImageReadBarcodesParameters] An ImageReadBarcodesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReadBarcodesResponse, Integer, Hash)>] ReadBarcodesResponse data, response status code and response headers
    def image_read_barcodes_with_http_info(image_read_barcodes_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_read_barcodes ...'
      end
      # verify the required parameter 'image_read_barcodes_parameters' is set
      if @api_client.config.client_side_validation && image_read_barcodes_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_read_barcodes_parameters' when calling ImageApi.image_read_barcodes"
      end
      # resource path
      local_var_path = '/api/image/ImageReadBarcodes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_read_barcodes_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ReadBarcodesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_read_barcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resizes a previously uploaded image.
    # @param image_resize_parameters [ImageResizeParameters] An ImageResizeParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageResizeResponse]
    def image_resize(image_resize_parameters, opts = {})
      data, _status_code, _headers = image_resize_with_http_info(image_resize_parameters, opts)
      data
    end

    # Resizes a previously uploaded image.
    # @param image_resize_parameters [ImageResizeParameters] An ImageResizeParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageResizeResponse, Integer, Hash)>] ImageResizeResponse data, response status code and response headers
    def image_resize_with_http_info(image_resize_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_resize ...'
      end
      # verify the required parameter 'image_resize_parameters' is set
      if @api_client.config.client_side_validation && image_resize_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_resize_parameters' when calling ImageApi.image_resize"
      end
      # resource path
      local_var_path = '/api/image/ImageResize'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_resize_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageResizeResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_resize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rotates and/or flips a previously uploaded image.
    # @param image_rotate_parameters [ImageRotateParameters] An ImageRotateParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageRotateResponse]
    def image_rotate(image_rotate_parameters, opts = {})
      data, _status_code, _headers = image_rotate_with_http_info(image_rotate_parameters, opts)
      data
    end

    # Rotates and/or flips a previously uploaded image.
    # @param image_rotate_parameters [ImageRotateParameters] An ImageRotateParameters object specifying the parameters for the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageRotateResponse, Integer, Hash)>] ImageRotateResponse data, response status code and response headers
    def image_rotate_with_http_info(image_rotate_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_rotate ...'
      end
      # verify the required parameter 'image_rotate_parameters' is set
      if @api_client.config.client_side_validation && image_rotate_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_rotate_parameters' when calling ImageApi.image_rotate"
      end
      # resource path
      local_var_path = '/api/image/ImageRotate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_rotate_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageRotateResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_rotate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object.
    # @param image_save_as_jpeg_parameters [ImageSaveAsJPEGParameters] An ImageSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSaveAsJPEGResponse]
    def image_save_as_jpeg(image_save_as_jpeg_parameters, opts = {})
      data, _status_code, _headers = image_save_as_jpeg_with_http_info(image_save_as_jpeg_parameters, opts)
      data
    end

    # Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object.
    # @param image_save_as_jpeg_parameters [ImageSaveAsJPEGParameters] An ImageSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSaveAsJPEGResponse, Integer, Hash)>] ImageSaveAsJPEGResponse data, response status code and response headers
    def image_save_as_jpeg_with_http_info(image_save_as_jpeg_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_jpeg ...'
      end
      # verify the required parameter 'image_save_as_jpeg_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_jpeg_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_jpeg_parameters' when calling ImageApi.image_save_as_jpeg"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsJPEG'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_jpeg_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSaveAsJPEGResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_jpeg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_jpeg_parameters [ImageSaveAsJPEGParameters] An ImageSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def image_save_as_jpeg_file(image_save_as_jpeg_parameters, opts = {})
      data, _status_code, _headers = image_save_as_jpeg_file_with_http_info(image_save_as_jpeg_parameters, opts)
      data
    end

    # Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_jpeg_parameters [ImageSaveAsJPEGParameters] An ImageSaveAsJPEGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def image_save_as_jpeg_file_with_http_info(image_save_as_jpeg_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_jpeg_file ...'
      end
      # verify the required parameter 'image_save_as_jpeg_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_jpeg_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_jpeg_parameters' when calling ImageApi.image_save_as_jpeg_file"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsJPEGFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_jpeg_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_jpeg_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object.
    # @param image_save_as_pdf_parameters [ImageSaveAsPDFParameters] An ImagesaveAsPDFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSaveAsPDFResponse]
    def image_save_as_pdf(image_save_as_pdf_parameters, opts = {})
      data, _status_code, _headers = image_save_as_pdf_with_http_info(image_save_as_pdf_parameters, opts)
      data
    end

    # Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object.
    # @param image_save_as_pdf_parameters [ImageSaveAsPDFParameters] An ImagesaveAsPDFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSaveAsPDFResponse, Integer, Hash)>] ImageSaveAsPDFResponse data, response status code and response headers
    def image_save_as_pdf_with_http_info(image_save_as_pdf_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_pdf ...'
      end
      # verify the required parameter 'image_save_as_pdf_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_pdf_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_pdf_parameters' when calling ImageApi.image_save_as_pdf"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsPDF'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_pdf_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSaveAsPDFResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_pdf_parameters [ImageSaveAsPDFParameters] An ImagesaveAsPDFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def image_save_as_pdf_file(image_save_as_pdf_parameters, opts = {})
      data, _status_code, _headers = image_save_as_pdf_file_with_http_info(image_save_as_pdf_parameters, opts)
      data
    end

    # Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_pdf_parameters [ImageSaveAsPDFParameters] An ImagesaveAsPDFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def image_save_as_pdf_file_with_http_info(image_save_as_pdf_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_pdf_file ...'
      end
      # verify the required parameter 'image_save_as_pdf_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_pdf_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_pdf_parameters' when calling ImageApi.image_save_as_pdf_file"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsPDFFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_pdf_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_pdf_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object.
    # @param image_save_as_pdfmrc_parameters [ImageSaveAsPDFMRCParameters] An ImagesaveAsPDFMRCParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSaveAsPDFMRCResponse]
    def image_save_as_pdfmrc(image_save_as_pdfmrc_parameters, opts = {})
      data, _status_code, _headers = image_save_as_pdfmrc_with_http_info(image_save_as_pdfmrc_parameters, opts)
      data
    end

    # Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object.
    # @param image_save_as_pdfmrc_parameters [ImageSaveAsPDFMRCParameters] An ImagesaveAsPDFMRCParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSaveAsPDFMRCResponse, Integer, Hash)>] ImageSaveAsPDFMRCResponse data, response status code and response headers
    def image_save_as_pdfmrc_with_http_info(image_save_as_pdfmrc_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_pdfmrc ...'
      end
      # verify the required parameter 'image_save_as_pdfmrc_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_pdfmrc_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_pdfmrc_parameters' when calling ImageApi.image_save_as_pdfmrc"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsPDFMRC'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_pdfmrc_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSaveAsPDFMRCResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_pdfmrc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_pdfmrc_parameters [ImageSaveAsPDFMRCParameters] An ImagesaveAsPDFMRCParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def image_save_as_pdfmrc_file(image_save_as_pdfmrc_parameters, opts = {})
      data, _status_code, _headers = image_save_as_pdfmrc_file_with_http_info(image_save_as_pdfmrc_parameters, opts)
      data
    end

    # Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_pdfmrc_parameters [ImageSaveAsPDFMRCParameters] An ImagesaveAsPDFMRCParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def image_save_as_pdfmrc_file_with_http_info(image_save_as_pdfmrc_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_pdfmrc_file ...'
      end
      # verify the required parameter 'image_save_as_pdfmrc_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_pdfmrc_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_pdfmrc_parameters' when calling ImageApi.image_save_as_pdfmrc_file"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsPDFMRCFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_pdfmrc_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_pdfmrc_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object.
    # @param image_save_as_png_parameters [ImageSaveAsPNGParameters] An ImageSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSaveAsPNGResponse]
    def image_save_as_png(image_save_as_png_parameters, opts = {})
      data, _status_code, _headers = image_save_as_png_with_http_info(image_save_as_png_parameters, opts)
      data
    end

    # Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object.
    # @param image_save_as_png_parameters [ImageSaveAsPNGParameters] An ImageSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSaveAsPNGResponse, Integer, Hash)>] ImageSaveAsPNGResponse data, response status code and response headers
    def image_save_as_png_with_http_info(image_save_as_png_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_png ...'
      end
      # verify the required parameter 'image_save_as_png_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_png_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_png_parameters' when calling ImageApi.image_save_as_png"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsPNG'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_png_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSaveAsPNGResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_png\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_png_parameters [ImageSaveAsPNGParameters] An ImageSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def image_save_as_png_file(image_save_as_png_parameters, opts = {})
      data, _status_code, _headers = image_save_as_png_file_with_http_info(image_save_as_png_parameters, opts)
      data
    end

    # Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_png_parameters [ImageSaveAsPNGParameters] An ImageSaveAsPNGParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def image_save_as_png_file_with_http_info(image_save_as_png_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_png_file ...'
      end
      # verify the required parameter 'image_save_as_png_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_png_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_png_parameters' when calling ImageApi.image_save_as_png_file"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsPNGFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_png_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_png_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object.
    # @param image_save_as_tiff_parameters [ImageSaveAsTIFFParameters] An ImageSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSaveAsTIFFResponse]
    def image_save_as_tiff(image_save_as_tiff_parameters, opts = {})
      data, _status_code, _headers = image_save_as_tiff_with_http_info(image_save_as_tiff_parameters, opts)
      data
    end

    # Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object.
    # @param image_save_as_tiff_parameters [ImageSaveAsTIFFParameters] An ImageSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSaveAsTIFFResponse, Integer, Hash)>] ImageSaveAsTIFFResponse data, response status code and response headers
    def image_save_as_tiff_with_http_info(image_save_as_tiff_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_tiff ...'
      end
      # verify the required parameter 'image_save_as_tiff_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_tiff_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_tiff_parameters' when calling ImageApi.image_save_as_tiff"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsTIFF'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_tiff_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSaveAsTIFFResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_tiff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_tiff_parameters [ImageSaveAsTIFFParameters] An ImageSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def image_save_as_tiff_file(image_save_as_tiff_parameters, opts = {})
      data, _status_code, _headers = image_save_as_tiff_file_with_http_info(image_save_as_tiff_parameters, opts)
      data
    end

    # Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_tiff_parameters [ImageSaveAsTIFFParameters] An ImageSaveAsTIFFParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def image_save_as_tiff_file_with_http_info(image_save_as_tiff_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_tiff_file ...'
      end
      # verify the required parameter 'image_save_as_tiff_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_tiff_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_tiff_parameters' when calling ImageApi.image_save_as_tiff_file"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsTIFFFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_tiff_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_tiff_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object.
    # @param image_save_as_tiff_multipage_parameters [ImageSaveAsTIFFMultipageParameters] An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSaveAsTIFFMultipageResponse]
    def image_save_as_tiff_multipage(image_save_as_tiff_multipage_parameters, opts = {})
      data, _status_code, _headers = image_save_as_tiff_multipage_with_http_info(image_save_as_tiff_multipage_parameters, opts)
      data
    end

    # Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object.
    # @param image_save_as_tiff_multipage_parameters [ImageSaveAsTIFFMultipageParameters] An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSaveAsTIFFMultipageResponse, Integer, Hash)>] ImageSaveAsTIFFMultipageResponse data, response status code and response headers
    def image_save_as_tiff_multipage_with_http_info(image_save_as_tiff_multipage_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_tiff_multipage ...'
      end
      # verify the required parameter 'image_save_as_tiff_multipage_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_tiff_multipage_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_tiff_multipage_parameters' when calling ImageApi.image_save_as_tiff_multipage"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsTIFFMultipage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_tiff_multipage_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSaveAsTIFFMultipageResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_tiff_multipage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_tiff_multipage_parameters [ImageSaveAsTIFFMultipageParameters] An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def image_save_as_tiff_multipage_file(image_save_as_tiff_multipage_parameters, opts = {})
      data, _status_code, _headers = image_save_as_tiff_multipage_file_with_http_info(image_save_as_tiff_multipage_parameters, opts)
      data
    end

    # Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
    # @param image_save_as_tiff_multipage_parameters [ImageSaveAsTIFFMultipageParameters] An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def image_save_as_tiff_multipage_file_with_http_info(image_save_as_tiff_multipage_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_save_as_tiff_multipage_file ...'
      end
      # verify the required parameter 'image_save_as_tiff_multipage_parameters' is set
      if @api_client.config.client_side_validation && image_save_as_tiff_multipage_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_save_as_tiff_multipage_parameters' when calling ImageApi.image_save_as_tiff_multipage_file"
      end
      # resource path
      local_var_path = '/api/image/ImageSaveAsTIFFMultipageFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_save_as_tiff_multipage_parameters) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_save_as_tiff_multipage_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Swaps two pages from a previously uploaded image.
    # @param image_swap_pages_parameters [ImageSwapPagesParameters] An ImageSwapPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [ImageSwapPagesResponse]
    def image_swap_pages(image_swap_pages_parameters, opts = {})
      data, _status_code, _headers = image_swap_pages_with_http_info(image_swap_pages_parameters, opts)
      data
    end

    # Swaps two pages from a previously uploaded image.
    # @param image_swap_pages_parameters [ImageSwapPagesParameters] An ImageSwapPagesParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageSwapPagesResponse, Integer, Hash)>] ImageSwapPagesResponse data, response status code and response headers
    def image_swap_pages_with_http_info(image_swap_pages_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImageApi.image_swap_pages ...'
      end
      # verify the required parameter 'image_swap_pages_parameters' is set
      if @api_client.config.client_side_validation && image_swap_pages_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'image_swap_pages_parameters' when calling ImageApi.image_swap_pages"
      end
      # resource path
      local_var_path = '/api/image/ImageSwapPages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(image_swap_pages_parameters) 

      # return_type
      return_type = opts[:return_type] || 'ImageSwapPagesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImageApi#image_swap_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
