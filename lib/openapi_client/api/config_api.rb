=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ConfigApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @return [String]
    def config_get_api_version(opts = {})
      data, _status_code, _headers = config_get_api_version_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def config_get_api_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.config_get_api_version ...'
      end
      # resource path
      local_var_path = '/api/config/ConfigGetAPIVersion'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'String' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#config_get_api_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the maximal length of a request content, in bytes.
    # @param [Hash] opts the optional parameters
    # @return [LongResponse]
    def config_get_max_allowed_content_length(opts = {})
      data, _status_code, _headers = config_get_max_allowed_content_length_with_http_info(opts)
      data
    end

    # Gets the maximal length of a request content, in bytes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LongResponse, Integer, Hash)>] LongResponse data, response status code and response headers
    def config_get_max_allowed_content_length_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.config_get_max_allowed_content_length ...'
      end
      # resource path
      local_var_path = '/api/config/ConfigGetMaxAllowedContentLength'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'LongResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#config_get_max_allowed_content_length\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the suggested client API timeout, in milliseconds.
    # @param [Hash] opts the optional parameters
    # @return [IntegerResponse]
    def config_get_suggested_client_timeout(opts = {})
      data, _status_code, _headers = config_get_suggested_client_timeout_with_http_info(opts)
      data
    end

    # Gets the suggested client API timeout, in milliseconds.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegerResponse, Integer, Hash)>] IntegerResponse data, response status code and response headers
    def config_get_suggested_client_timeout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.config_get_suggested_client_timeout ...'
      end
      # resource path
      local_var_path = '/api/config/ConfigGetSuggestedClientTimeout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IntegerResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#config_get_suggested_client_timeout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the suggested maximum number of threads to be used simultaneously by a client application.
    # @param [Hash] opts the optional parameters
    # @return [IntegerResponse]
    def config_get_suggested_max_client_threads(opts = {})
      data, _status_code, _headers = config_get_suggested_max_client_threads_with_http_info(opts)
      data
    end

    # Gets the suggested maximum number of threads to be used simultaneously by a client application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegerResponse, Integer, Hash)>] IntegerResponse data, response status code and response headers
    def config_get_suggested_max_client_threads_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.config_get_suggested_max_client_threads ...'
      end
      # resource path
      local_var_path = '/api/config/ConfigGetSuggestedMaxClientThreads'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IntegerResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#config_get_suggested_max_client_threads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of supported fonts for text drawing operations.
    # @param [Hash] opts the optional parameters
    # @return [Array<Font>]
    def config_get_supported_fonts(opts = {})
      data, _status_code, _headers = config_get_supported_fonts_with_http_info(opts)
      data
    end

    # Gets the list of supported fonts for text drawing operations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Font>, Integer, Hash)>] Array<Font> data, response status code and response headers
    def config_get_supported_fonts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.config_get_supported_fonts ...'
      end
      # resource path
      local_var_path = '/api/config/ConfigGetSupportedFonts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Font>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#config_get_supported_fonts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of supported languages for OCR.
    # @param [Hash] opts the optional parameters
    # @return [StringArrayResponse]
    def config_get_supported_ocr_languages(opts = {})
      data, _status_code, _headers = config_get_supported_ocr_languages_with_http_info(opts)
      data
    end

    # Gets the list of supported languages for OCR.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringArrayResponse, Integer, Hash)>] StringArrayResponse data, response status code and response headers
    def config_get_supported_ocr_languages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigApi.config_get_supported_ocr_languages ...'
      end
      # resource path
      local_var_path = '/api/config/ConfigGetSupportedOCRLanguages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StringArrayResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigApi#config_get_supported_ocr_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
