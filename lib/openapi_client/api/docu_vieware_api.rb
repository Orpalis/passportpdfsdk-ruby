=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DocuViewareApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets the HTML dom of a DocuVieware control.
    # @param docu_vieware_get_control_parameters [DocuViewareGetControlParameters] A DocuViewareGetControlParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [DocuViewareGetControlResponse]
    def docu_vieware_get_control(docu_vieware_get_control_parameters, opts = {})
      data, _status_code, _headers = docu_vieware_get_control_with_http_info(docu_vieware_get_control_parameters, opts)
      data
    end

    # Gets the HTML dom of a DocuVieware control.
    # @param docu_vieware_get_control_parameters [DocuViewareGetControlParameters] A DocuViewareGetControlParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocuViewareGetControlResponse, Integer, Hash)>] DocuViewareGetControlResponse data, response status code and response headers
    def docu_vieware_get_control_with_http_info(docu_vieware_get_control_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocuViewareApi.docu_vieware_get_control ...'
      end
      # verify the required parameter 'docu_vieware_get_control_parameters' is set
      if @api_client.config.client_side_validation && docu_vieware_get_control_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'docu_vieware_get_control_parameters' when calling DocuViewareApi.docu_vieware_get_control"
      end
      # resource path
      local_var_path = '/api/docuvieware/DocuViewareGetControl'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(docu_vieware_get_control_parameters) 

      # return_type
      return_type = opts[:return_type] || 'DocuViewareGetControlResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocuViewareApi#docu_vieware_get_control\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the DocuVieware engine version.
    # @param [Hash] opts the optional parameters
    # @return [StringResponse]
    def docu_vieware_get_version(opts = {})
      data, _status_code, _headers = docu_vieware_get_version_with_http_info(opts)
      data
    end

    # Get the DocuVieware engine version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResponse, Integer, Hash)>] StringResponse data, response status code and response headers
    def docu_vieware_get_version_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocuViewareApi.docu_vieware_get_version ...'
      end
      # resource path
      local_var_path = '/api/docuvieware/DocuViewareGetVersion'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StringResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocuViewareApi#docu_vieware_get_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Saves the document being handled by a specific DocuVieware control, in its current state.
    # @param docu_vieware_save_parameters [DocuViewareSaveParameters] A DocuViewareSaveParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [DocuViewareSaveResponse]
    def docu_vieware_save(docu_vieware_save_parameters, opts = {})
      data, _status_code, _headers = docu_vieware_save_with_http_info(docu_vieware_save_parameters, opts)
      data
    end

    # Saves the document being handled by a specific DocuVieware control, in its current state.
    # @param docu_vieware_save_parameters [DocuViewareSaveParameters] A DocuViewareSaveParameters object specifying the parameters of the action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocuViewareSaveResponse, Integer, Hash)>] DocuViewareSaveResponse data, response status code and response headers
    def docu_vieware_save_with_http_info(docu_vieware_save_parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DocuViewareApi.docu_vieware_save ...'
      end
      # verify the required parameter 'docu_vieware_save_parameters' is set
      if @api_client.config.client_side_validation && docu_vieware_save_parameters.nil?
        fail ArgumentError, "Missing the required parameter 'docu_vieware_save_parameters' when calling DocuViewareApi.docu_vieware_save"
      end
      # resource path
      local_var_path = '/api/docuvieware/DocuViewareSave'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(docu_vieware_save_parameters) 

      # return_type
      return_type = opts[:return_type] || 'DocuViewareSaveResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DocuViewareApi#docu_vieware_save\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
