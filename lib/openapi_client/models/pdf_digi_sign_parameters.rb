=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Represents the parameters for a digital signature action.
  class PdfDigiSignParameters
    # The identifier of the previously uploaded file to be processed.
    attr_accessor :file_id

    # Specifies the data of the digital PKCS#12 certificate file.
    attr_accessor :certificate_data

    # Specifies the certificate password.
    attr_accessor :certificate_password

    attr_accessor :signature_mode

    attr_accessor :signature_certification_level

    attr_accessor :signature_hash_algorithm

    # Specifies the name of the signer.
    attr_accessor :signer_name

    # Specifies the reason of the signature.
    attr_accessor :reason

    # Specifies the location where the signature is applied.
    attr_accessor :location

    # Specifies contact information about the signer.
    attr_accessor :contact_info

    # Specifies the URL of the server responsible of providing a time stamp.
    attr_accessor :time_stamp_url

    # Specifies the optional user name associated with the time stamp server.
    attr_accessor :time_stamp_user_name

    # Specifies the optional password associated with the time stamp server.
    attr_accessor :time_stamp_password

    # Specifies whether the signed PDF shall be linearized.
    attr_accessor :linearize

    # Specifies whether the signature shall be drawn on the document.
    attr_accessor :draw_signature

    # Specifies the number of the page on which the signature shall be drawn.
    attr_accessor :page_number

    # Specifies whether a validation mark shall be drawn with the signature.
    attr_accessor :show_validation_mark

    # Specifies the data of the image to be drawn at the signature location.
    attr_accessor :image_data

    attr_accessor :signature_layout

    attr_accessor :signature_text

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'file_id' => :'FileId',
        :'certificate_data' => :'CertificateData',
        :'certificate_password' => :'CertificatePassword',
        :'signature_mode' => :'SignatureMode',
        :'signature_certification_level' => :'SignatureCertificationLevel',
        :'signature_hash_algorithm' => :'SignatureHashAlgorithm',
        :'signer_name' => :'SignerName',
        :'reason' => :'Reason',
        :'location' => :'Location',
        :'contact_info' => :'ContactInfo',
        :'time_stamp_url' => :'TimeStampURL',
        :'time_stamp_user_name' => :'TimeStampUserName',
        :'time_stamp_password' => :'TimeStampPassword',
        :'linearize' => :'Linearize',
        :'draw_signature' => :'DrawSignature',
        :'page_number' => :'PageNumber',
        :'show_validation_mark' => :'ShowValidationMark',
        :'image_data' => :'ImageData',
        :'signature_layout' => :'SignatureLayout',
        :'signature_text' => :'SignatureText'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'file_id' => :'String',
        :'certificate_data' => :'String',
        :'certificate_password' => :'String',
        :'signature_mode' => :'SignatureMode',
        :'signature_certification_level' => :'SignatureCertificationLevel',
        :'signature_hash_algorithm' => :'SignatureHash',
        :'signer_name' => :'String',
        :'reason' => :'String',
        :'location' => :'String',
        :'contact_info' => :'String',
        :'time_stamp_url' => :'String',
        :'time_stamp_user_name' => :'String',
        :'time_stamp_password' => :'String',
        :'linearize' => :'Boolean',
        :'draw_signature' => :'Boolean',
        :'page_number' => :'Integer',
        :'show_validation_mark' => :'Boolean',
        :'image_data' => :'String',
        :'signature_layout' => :'DrawableContentLayoutParameters',
        :'signature_text' => :'PdfAlignedTextParameters'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'signer_name',
        :'reason',
        :'location',
        :'contact_info',
        :'time_stamp_url',
        :'time_stamp_user_name',
        :'time_stamp_password',
        :'image_data',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PdfDigiSignParameters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PdfDigiSignParameters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'file_id')
        self.file_id = attributes[:'file_id']
      end

      if attributes.key?(:'certificate_data')
        self.certificate_data = attributes[:'certificate_data']
      end

      if attributes.key?(:'certificate_password')
        self.certificate_password = attributes[:'certificate_password']
      end

      if attributes.key?(:'signature_mode')
        self.signature_mode = attributes[:'signature_mode']
      end

      if attributes.key?(:'signature_certification_level')
        self.signature_certification_level = attributes[:'signature_certification_level']
      end

      if attributes.key?(:'signature_hash_algorithm')
        self.signature_hash_algorithm = attributes[:'signature_hash_algorithm']
      end

      if attributes.key?(:'signer_name')
        self.signer_name = attributes[:'signer_name']
      else
        self.signer_name = 'PassportPDF'
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      else
        self.reason = ''
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      else
        self.location = ''
      end

      if attributes.key?(:'contact_info')
        self.contact_info = attributes[:'contact_info']
      else
        self.contact_info = ''
      end

      if attributes.key?(:'time_stamp_url')
        self.time_stamp_url = attributes[:'time_stamp_url']
      else
        self.time_stamp_url = ''
      end

      if attributes.key?(:'time_stamp_user_name')
        self.time_stamp_user_name = attributes[:'time_stamp_user_name']
      else
        self.time_stamp_user_name = ''
      end

      if attributes.key?(:'time_stamp_password')
        self.time_stamp_password = attributes[:'time_stamp_password']
      else
        self.time_stamp_password = ''
      end

      if attributes.key?(:'linearize')
        self.linearize = attributes[:'linearize']
      else
        self.linearize = false
      end

      if attributes.key?(:'draw_signature')
        self.draw_signature = attributes[:'draw_signature']
      else
        self.draw_signature = false
      end

      if attributes.key?(:'page_number')
        self.page_number = attributes[:'page_number']
      else
        self.page_number = 1
      end

      if attributes.key?(:'show_validation_mark')
        self.show_validation_mark = attributes[:'show_validation_mark']
      else
        self.show_validation_mark = false
      end

      if attributes.key?(:'image_data')
        self.image_data = attributes[:'image_data']
      end

      if attributes.key?(:'signature_layout')
        self.signature_layout = attributes[:'signature_layout']
      end

      if attributes.key?(:'signature_text')
        self.signature_text = attributes[:'signature_text']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @file_id.nil?
        invalid_properties.push('invalid value for "file_id", file_id cannot be nil.')
      end

      if @certificate_data.nil?
        invalid_properties.push('invalid value for "certificate_data", certificate_data cannot be nil.')
      end

      if @certificate_password.nil?
        invalid_properties.push('invalid value for "certificate_password", certificate_password cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @file_id.nil?
      return false if @certificate_data.nil?
      return false if @certificate_password.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_id == o.file_id &&
          certificate_data == o.certificate_data &&
          certificate_password == o.certificate_password &&
          signature_mode == o.signature_mode &&
          signature_certification_level == o.signature_certification_level &&
          signature_hash_algorithm == o.signature_hash_algorithm &&
          signer_name == o.signer_name &&
          reason == o.reason &&
          location == o.location &&
          contact_info == o.contact_info &&
          time_stamp_url == o.time_stamp_url &&
          time_stamp_user_name == o.time_stamp_user_name &&
          time_stamp_password == o.time_stamp_password &&
          linearize == o.linearize &&
          draw_signature == o.draw_signature &&
          page_number == o.page_number &&
          show_validation_mark == o.show_validation_mark &&
          image_data == o.image_data &&
          signature_layout == o.signature_layout &&
          signature_text == o.signature_text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [file_id, certificate_data, certificate_password, signature_mode, signature_certification_level, signature_hash_algorithm, signer_name, reason, location, contact_info, time_stamp_url, time_stamp_user_name, time_stamp_password, linearize, draw_signature, page_number, show_validation_mark, image_data, signature_layout, signature_text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
