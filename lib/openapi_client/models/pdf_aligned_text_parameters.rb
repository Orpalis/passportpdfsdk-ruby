=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Represents the parameters for aligned text content.
  class PdfAlignedTextParameters
    attr_accessor :text_vertical_alignment

    attr_accessor :text_horizontal_alignment

    # Specifies the text.
    attr_accessor :text

    # Specifies the color of the text, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").
    attr_accessor :text_color

    # Specifies the name of the font to be used.
    attr_accessor :font_name

    attr_accessor :standard_font_name

    attr_accessor :font_style

    # Specifies the size of the font.
    attr_accessor :font_size

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'text_vertical_alignment' => :'TextVerticalAlignment',
        :'text_horizontal_alignment' => :'TextHorizontalAlignment',
        :'text' => :'Text',
        :'text_color' => :'TextColor',
        :'font_name' => :'FontName',
        :'standard_font_name' => :'StandardFontName',
        :'font_style' => :'FontStyle',
        :'font_size' => :'FontSize'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'text_vertical_alignment' => :'TextAlignment',
        :'text_horizontal_alignment' => :'TextAlignment',
        :'text' => :'String',
        :'text_color' => :'String',
        :'font_name' => :'String',
        :'standard_font_name' => :'StandardFontName',
        :'font_style' => :'FontStyle',
        :'font_size' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'text',
        :'text_color',
        :'font_name',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PdfAlignedTextParameters` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PdfAlignedTextParameters`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'text_vertical_alignment')
        self.text_vertical_alignment = attributes[:'text_vertical_alignment']
      end

      if attributes.key?(:'text_horizontal_alignment')
        self.text_horizontal_alignment = attributes[:'text_horizontal_alignment']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'text_color')
        self.text_color = attributes[:'text_color']
      else
        self.text_color = 'black'
      end

      if attributes.key?(:'font_name')
        self.font_name = attributes[:'font_name']
      end

      if attributes.key?(:'standard_font_name')
        self.standard_font_name = attributes[:'standard_font_name']
      end

      if attributes.key?(:'font_style')
        self.font_style = attributes[:'font_style']
      end

      if attributes.key?(:'font_size')
        self.font_size = attributes[:'font_size']
      else
        self.font_size = 11
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          text_vertical_alignment == o.text_vertical_alignment &&
          text_horizontal_alignment == o.text_horizontal_alignment &&
          text == o.text &&
          text_color == o.text_color &&
          font_name == o.font_name &&
          standard_font_name == o.standard_font_name &&
          font_style == o.font_style &&
          font_size == o.font_size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [text_vertical_alignment, text_horizontal_alignment, text, text_color, font_name, standard_font_name, font_style, font_size].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
