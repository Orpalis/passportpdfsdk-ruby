=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Represents the response to a get info action request.
  class PdfGetInfoResponse
    attr_accessor :error

    # Specifies the number of remaining tokens.
    attr_accessor :remaining_tokens

    # Specifies the number of pages of the PDF.
    attr_accessor :page_count

    # Specifies the version of the PDF.
    attr_accessor :version

    # Specifies the author name specified within the PDF, if any.
    attr_accessor :author

    # Specifies the document title specified within the PDF, if any.
    attr_accessor :title

    # Specifies the document subject specified within the PDF, if any.
    attr_accessor :subject

    # Specifies the producer name specified within the PDF, if any.
    attr_accessor :producer

    # Specifies the metadata contained within the PDF, if any.
    attr_accessor :metadata

    # Specifies the keywords associated with the PDF, if any.
    attr_accessor :keywords

    # Specifies if the PDF is protected with a user password.
    attr_accessor :has_user_password

    # Specifies if the PDF is protected with a owner password.
    attr_accessor :has_owner_password

    attr_accessor :encryption

    # Specifies if the user is allowed to print the document, but possibly not at the highest quality level.
    attr_accessor :can_print

    # Specifies if the user is allowed to copy or extract text and graphics from the document.
    attr_accessor :can_copy

    # Specifies if the user is allowed to modify the document.
    attr_accessor :can_modify

    # Specifies if the user is allowed to add annotations.
    attr_accessor :can_add_notes

    # Specifies if the user is allowed to fill-in form fields.
    attr_accessor :can_fill_fields

    # Specifies if the user is allowed for copying or extracting for use with accessibility features.
    attr_accessor :can_copy_access

    # Specifies if the user is allowed to assemble the document.
    attr_accessor :can_assemble

    # Specifies if the user is allowed to print the document with high resolution.
    attr_accessor :can_print_full

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'error' => :'Error',
        :'remaining_tokens' => :'RemainingTokens',
        :'page_count' => :'PageCount',
        :'version' => :'Version',
        :'author' => :'Author',
        :'title' => :'Title',
        :'subject' => :'Subject',
        :'producer' => :'Producer',
        :'metadata' => :'Metadata',
        :'keywords' => :'Keywords',
        :'has_user_password' => :'HasUserPassword',
        :'has_owner_password' => :'HasOwnerPassword',
        :'encryption' => :'Encryption',
        :'can_print' => :'CanPrint',
        :'can_copy' => :'CanCopy',
        :'can_modify' => :'CanModify',
        :'can_add_notes' => :'CanAddNotes',
        :'can_fill_fields' => :'CanFillFields',
        :'can_copy_access' => :'CanCopyAccess',
        :'can_assemble' => :'CanAssemble',
        :'can_print_full' => :'CanPrintFull'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'error' => :'Error',
        :'remaining_tokens' => :'Integer',
        :'page_count' => :'Integer',
        :'version' => :'String',
        :'author' => :'String',
        :'title' => :'String',
        :'subject' => :'String',
        :'producer' => :'String',
        :'metadata' => :'String',
        :'keywords' => :'String',
        :'has_user_password' => :'Boolean',
        :'has_owner_password' => :'Boolean',
        :'encryption' => :'EncryptionAlgorithm',
        :'can_print' => :'Boolean',
        :'can_copy' => :'Boolean',
        :'can_modify' => :'Boolean',
        :'can_add_notes' => :'Boolean',
        :'can_fill_fields' => :'Boolean',
        :'can_copy_access' => :'Boolean',
        :'can_assemble' => :'Boolean',
        :'can_print_full' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'version',
        :'author',
        :'title',
        :'subject',
        :'producer',
        :'metadata',
        :'keywords',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PdfGetInfoResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PdfGetInfoResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'error')
        self.error = attributes[:'error']
      end

      if attributes.key?(:'remaining_tokens')
        self.remaining_tokens = attributes[:'remaining_tokens']
      end

      if attributes.key?(:'page_count')
        self.page_count = attributes[:'page_count']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'producer')
        self.producer = attributes[:'producer']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'keywords')
        self.keywords = attributes[:'keywords']
      end

      if attributes.key?(:'has_user_password')
        self.has_user_password = attributes[:'has_user_password']
      end

      if attributes.key?(:'has_owner_password')
        self.has_owner_password = attributes[:'has_owner_password']
      end

      if attributes.key?(:'encryption')
        self.encryption = attributes[:'encryption']
      end

      if attributes.key?(:'can_print')
        self.can_print = attributes[:'can_print']
      end

      if attributes.key?(:'can_copy')
        self.can_copy = attributes[:'can_copy']
      end

      if attributes.key?(:'can_modify')
        self.can_modify = attributes[:'can_modify']
      end

      if attributes.key?(:'can_add_notes')
        self.can_add_notes = attributes[:'can_add_notes']
      end

      if attributes.key?(:'can_fill_fields')
        self.can_fill_fields = attributes[:'can_fill_fields']
      end

      if attributes.key?(:'can_copy_access')
        self.can_copy_access = attributes[:'can_copy_access']
      end

      if attributes.key?(:'can_assemble')
        self.can_assemble = attributes[:'can_assemble']
      end

      if attributes.key?(:'can_print_full')
        self.can_print_full = attributes[:'can_print_full']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          error == o.error &&
          remaining_tokens == o.remaining_tokens &&
          page_count == o.page_count &&
          version == o.version &&
          author == o.author &&
          title == o.title &&
          subject == o.subject &&
          producer == o.producer &&
          metadata == o.metadata &&
          keywords == o.keywords &&
          has_user_password == o.has_user_password &&
          has_owner_password == o.has_owner_password &&
          encryption == o.encryption &&
          can_print == o.can_print &&
          can_copy == o.can_copy &&
          can_modify == o.can_modify &&
          can_add_notes == o.can_add_notes &&
          can_fill_fields == o.can_fill_fields &&
          can_copy_access == o.can_copy_access &&
          can_assemble == o.can_assemble &&
          can_print_full == o.can_print_full
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [error, remaining_tokens, page_count, version, author, title, subject, producer, metadata, keywords, has_user_password, has_owner_password, encryption, can_print, can_copy, can_modify, can_add_notes, can_fill_fields, can_copy_access, can_assemble, can_print_full].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
