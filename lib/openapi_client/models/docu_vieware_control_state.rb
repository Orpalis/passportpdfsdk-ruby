=begin
#PassportPDF API

#      Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Specifies configuration and appearance state of a DocuVieware control.
  class DocuViewareControlState
    # Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.<br />
    attr_accessor :timeout

    # Specifies client the identifier associated with the control.
    attr_accessor :control_id

    # Specifies if the DocuVieware logo is displayed in the toolbar.
    attr_accessor :show_logo

    # Specifies the remote IP. This property can be leaved empty if user requests don't need to be traced.
    attr_accessor :remote_ip

    attr_accessor :file_hosting_uri

    # Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix 'fileid:' to load a document from a file ID handled by PassportPDF. ie: 'fileid:00000-00000-00000-00000-00000'.
    attr_accessor :document_uri

    # Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.
    attr_accessor :document_file_name

    # A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.
    attr_accessor :disable_download_progress

    attr_accessor :document_alignment

    attr_accessor :document_position

    # Specifies if GdPicture/XMP annotations support is activated.
    attr_accessor :enable_gd_picture_annotations

    # Specifies whether printing support is disabled for annotations.
    attr_accessor :disable_annotation_printing

    # Specifies whether form fields can be edited into the client browser or not.
    attr_accessor :enable_form_fields_edition

    # Specifies the editor mode for the GdPicture/XMP annotation support.<br />
    attr_accessor :annotation_editor_mode

    attr_accessor :link_annotation_click_behaviour

    # Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...
    attr_accessor :zoom

    attr_accessor :zoom_mode

    attr_accessor :open_zoom_mode

    attr_accessor :view_rotation

    attr_accessor :page_rotation

    # Defines the percentage of increasing or decreasing level of zoom for 'Zoom In' and 'Zoom Out' operations.
    attr_accessor :zoom_step

    # Specifies whether scrollbars can be displayed or not within the viewer.<br />
    attr_accessor :scroll_bars

    # Specifies whether the viewer shall always show scrollbars.
    attr_accessor :force_scroll_bars

    attr_accessor :page_view_mode

    # Specifies if text selection is permitted.
    attr_accessor :enable_text_selection

    # Specifies whether the selected text context menu options should contain annotations entries.
    attr_accessor :enable_text_selection_annotation

    attr_accessor :locale

    # Specifies the different languages used by the user's browser.
    attr_accessor :user_languages

    # Specifies the width of the control within its container.
    attr_accessor :control_width

    # Specifies, the height of the control within its container.
    attr_accessor :control_height

    # Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.
    attr_accessor :annotation_drop_shadow

    # Specifies whether printing is allowed.
    attr_accessor :allow_print

    # Specifies whether file upload is allowed.
    attr_accessor :allow_upload

    # Specifies whether multiple thumbnails selection is allowed.
    attr_accessor :enable_multiple_thumbnail_selection

    # Specifies whether the thumbnails can be moved by drag and drop.
    attr_accessor :enable_thumbnail_drag_drop

    # Specifies whether the open button shall be enabled.
    attr_accessor :enable_file_upload_button

    # Specifies whether the 'open from uri' button shall be enabled.
    attr_accessor :enable_load_from_uri_button

    # Specifies whether the save button shall be enabled.
    attr_accessor :enable_save_button

    # Specifies whether the save button shall be enabled.
    attr_accessor :enable_pages_navigation_buttons

    # Specifies whether the print button shall be enabled.
    attr_accessor :enable_print_button

    # Specifies whether the print to pdf option shall be enabled.
    attr_accessor :enable_print_to_pdf

    # Specifies whether the fit width button shall be enabled.
    attr_accessor :enable_fit_width_button

    # Specifies whether the fit original size button shall be enabled.
    attr_accessor :enable_zoom100_button

    # Specifies whether the mouse mode button group shall be enabled.
    attr_accessor :enable_mouse_mode_buttons

    # Specifies whether the pan mode button shall be enabled.
    attr_accessor :enable_pan_mode_button

    # Specifies whether the select mode button shall be enabled.
    attr_accessor :enable_select_mode_button

    # Specifies whether the marquee zoom mode button shall be enabled.
    attr_accessor :enable_marquee_zoom_mode_button

    # Specifies whether the fullscreen button shall be enabled.
    attr_accessor :enable_full_screen_button

    # Specifies whether the 'Fit Page' button shall be enabled.
    attr_accessor :enable_fit_page_button

    # Specifies whether the zoom button group shall be enabled.
    attr_accessor :enable_zoom_buttons

    # Specifies whether the page view mode button shall be enabled.
    attr_accessor :enable_page_view_buttons

    attr_accessor :rotate_buttons_mode

    # Specifies whether the rotation button group shall be enabled.
    attr_accessor :enable_rotate_buttons

    # Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_annotation_action_buttons

    # Specifies whether the selected text annotations shall be editable.
    attr_accessor :enable_selected_text_annotation_edition

    # Specifies whether the rectangle highlighter annotation button shall be enabled. <br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_rectangle_highlighter_annotation_button

    # Specifies whether the freehand highlighter annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_freehand_highlighter_annotation_button

    # Specifies whether the rubber stamp annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_rubber_stamp_annotation_button

    # Specifies whether the rectangle annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_rectangle_annotation_button

    # Specifies whether the ellipse annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_ellipse_annotation_button

    # Specifies whether the line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_line_annotation_button

    # Specifies whether the connected line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_connected_line_annotation_button

    # Specifies whether the freehand annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_freehand_annotation_button

    # Specifies whether the line arrow annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_line_arrow_annotation_button

    # Specifies whether the link annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_link_annotation_button

    # Specifies whether the ruler annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_ruler_annotation_button

    attr_accessor :enable_poly_ruler_annotation_button

    # Specifies whether the text annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_text_annotation_button

    # Specifies whether the sticky note annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :enable_sticky_note_annotation_button

    # Specifies whether the TWAIN acquisition button shall be enabled.
    attr_accessor :enable_twain_acquisition_button

    # Enables the custom configuration support for the TWAIN source.
    attr_accessor :twain_source_enable_custom_configuration

    # Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
    attr_accessor :twain_source_select_feeder

    # Specifies the bit depth the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
    attr_accessor :twain_source_bit_depth

    # Specifies the resolution the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
    attr_accessor :twain_source_resolution

    # Specifies whether the TWAIN acquisition source shall enable duplex acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
    attr_accessor :twain_source_enable_duplex

    # Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
    attr_accessor :twain_source_hide_ui

    # Specifies whether the drawing mode for freehand annotation is multi line or not.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :free_hand_continuous_drawing_mode

    # Specifies whether the text search SnapIn is enabled.
    attr_accessor :show_text_search_snap_in

    # Specifies whether the Thumbnails SnapIn is enabled.
    attr_accessor :show_thumbnails_snap_in

    # Specifies whether the Bookmarks SnapIn is enabled.
    attr_accessor :show_bookmarks_snap_in

    # Specifies whether the annotations SnapIn is enabled.
    attr_accessor :show_annotations_snap_in

    # Specifies whether the Annotations Comments SnapIn is enabled.
    attr_accessor :show_annotations_comments_snap_in

    # Specifies whether the Redaction Snap-In is enabled or not.  <remarks>  Default value is true.  </remarks>
    attr_accessor :show_redaction_snap_in

    # Specifies whether the Digital Signature Snap-In is enabled or not.  <remarks>  Default value is false.  </remarks>
    attr_accessor :show_digital_signature_snap_in

    # The width, in pixels, of each thumbnail.
    attr_accessor :thumbnail_width

    # The height, in pixels, of each thumbnail.
    attr_accessor :thumbnail_height

    # Specifies the Snap-in panel default width.
    attr_accessor :snap_in_panel_default_width

    # Specifies whether the Snap-in panel is collapsed or not.
    attr_accessor :collapsed_snap_in

    # Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.
    attr_accessor :collapse_snapin_on_document_closed

    # Specifies whether the button that collapses the Snap-in panel is displayed or not.
    attr_accessor :show_snap_in_collapse_button

    # Specifies whether the header of the Snap-in panel is displayed or not.
    attr_accessor :show_snap_in_panel_header

    # Specifies whether the Snap-in button strip is displayed or not.
    attr_accessor :show_snap_in_button_strip

    # Specifies whether the Toolbars are visible or not.
    attr_accessor :show_toolbar

    attr_accessor :toolbar_style

    # The space, in pixels, between each button of the toolbar.
    attr_accessor :toolbar_buttons_spacing

    # The height, in pixels, of the toolbar.
    attr_accessor :toolbar_height

    # Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.
    attr_accessor :stroke_color

    # Specifies the color used to define dropdowns borders, buttons separators, line separators.
    attr_accessor :misc_border_color

    # Specifies the color used in both dialogs and snap-ins headers.
    attr_accessor :header_color

    # Specifies the color used in both dialogs and snap-ins body background.
    attr_accessor :panel_back_color

    # Specifies the viewer area background color.
    attr_accessor :viewer_back_color

    # Specifies the selected and active elements stroke color.
    attr_accessor :active_selected_color

    # Viewer Toolbar Background Color.
    attr_accessor :toolbar_back_color

    # Custom error notification icon.<br />  Used to specify a custom icon within errors notification boxes.
    attr_accessor :custom_notification_icon_error

    # Custom question notification icon.<br />  Used to specify a custom icon within questions notification boxes.
    attr_accessor :custom_notification_icon_question

    # Custom warning notification icon.<br />  Used to specify a custom icon within warnings notification boxes.
    attr_accessor :custom_notification_icon_warning

    # Custom info notification icon.<br />  Used to specify a custom icon within information notification boxes.
    attr_accessor :custom_notification_icon_info

    # Custom success notification icon.<br />  Used to specify a custom icon within success notification boxes.
    attr_accessor :custom_notification_icon_ok

    # Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.<br />  Wildcard character '*' can be used to specify any supported format.<br />  The following extensions are currently supported: \"PDF\", \"TIFF\".<br />  For example use \"*\" to allow all supported format for export, \"PDF\" to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export.
    attr_accessor :allowed_export_formats

    # Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
    attr_accessor :disable_annotation_drawing_mode_panel

    attr_accessor :image_quality

    attr_accessor :print_quality

    # Specifies whether documents drag & drop is allowed into the viewer area.
    attr_accessor :enable_documents_drop

    # Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
    attr_accessor :ajax_custom_headers

    # Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won't be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
    attr_accessor :file_download_custom_headers

    # Specifies the maximum number of results provided by a text search request.
    attr_accessor :text_search_max_results

    # Specifies, in bytes, the upload size limit.
    attr_accessor :max_upload_size

    # Specifies, in bytes, the download size limit.
    attr_accessor :max_download_size

    # Specifies the maximum of pages per loaded document.
    attr_accessor :max_pages

    # Specifies a list of certificates to be made available on the client side to apply digital signature to documents.
    attr_accessor :certificates

    # A formatted string specifying undocumented extra features to handle.
    attr_accessor :extra_features

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timeout' => :'Timeout',
        :'control_id' => :'ControlID',
        :'show_logo' => :'ShowLogo',
        :'remote_ip' => :'RemoteIP',
        :'file_hosting_uri' => :'FileHostingURI',
        :'document_uri' => :'DocumentURI',
        :'document_file_name' => :'DocumentFileName',
        :'disable_download_progress' => :'DisableDownloadProgress',
        :'document_alignment' => :'DocumentAlignment',
        :'document_position' => :'DocumentPosition',
        :'enable_gd_picture_annotations' => :'EnableGdPictureAnnotations',
        :'disable_annotation_printing' => :'DisableAnnotationPrinting',
        :'enable_form_fields_edition' => :'EnableFormFieldsEdition',
        :'annotation_editor_mode' => :'AnnotationEditorMode',
        :'link_annotation_click_behaviour' => :'LinkAnnotationClickBehaviour',
        :'zoom' => :'Zoom',
        :'zoom_mode' => :'ZoomMode',
        :'open_zoom_mode' => :'OpenZoomMode',
        :'view_rotation' => :'ViewRotation',
        :'page_rotation' => :'PageRotation',
        :'zoom_step' => :'ZoomStep',
        :'scroll_bars' => :'ScrollBars',
        :'force_scroll_bars' => :'ForceScrollBars',
        :'page_view_mode' => :'PageViewMode',
        :'enable_text_selection' => :'EnableTextSelection',
        :'enable_text_selection_annotation' => :'EnableTextSelectionAnnotation',
        :'locale' => :'Locale',
        :'user_languages' => :'UserLanguages',
        :'control_width' => :'ControlWidth',
        :'control_height' => :'ControlHeight',
        :'annotation_drop_shadow' => :'AnnotationDropShadow',
        :'allow_print' => :'AllowPrint',
        :'allow_upload' => :'AllowUpload',
        :'enable_multiple_thumbnail_selection' => :'EnableMultipleThumbnailSelection',
        :'enable_thumbnail_drag_drop' => :'EnableThumbnailDragDrop',
        :'enable_file_upload_button' => :'EnableFileUploadButton',
        :'enable_load_from_uri_button' => :'EnableLoadFromUriButton',
        :'enable_save_button' => :'EnableSaveButton',
        :'enable_pages_navigation_buttons' => :'EnablePagesNavigationButtons',
        :'enable_print_button' => :'EnablePrintButton',
        :'enable_print_to_pdf' => :'EnablePrintToPDF',
        :'enable_fit_width_button' => :'EnableFitWidthButton',
        :'enable_zoom100_button' => :'EnableZoom100Button',
        :'enable_mouse_mode_buttons' => :'EnableMouseModeButtons',
        :'enable_pan_mode_button' => :'EnablePanModeButton',
        :'enable_select_mode_button' => :'EnableSelectModeButton',
        :'enable_marquee_zoom_mode_button' => :'EnableMarqueeZoomModeButton',
        :'enable_full_screen_button' => :'EnableFullScreenButton',
        :'enable_fit_page_button' => :'EnableFitPageButton',
        :'enable_zoom_buttons' => :'EnableZoomButtons',
        :'enable_page_view_buttons' => :'EnablePageViewButtons',
        :'rotate_buttons_mode' => :'RotateButtonsMode',
        :'enable_rotate_buttons' => :'EnableRotateButtons',
        :'enable_annotation_action_buttons' => :'EnableAnnotationActionButtons',
        :'enable_selected_text_annotation_edition' => :'EnableSelectedTextAnnotationEdition',
        :'enable_rectangle_highlighter_annotation_button' => :'EnableRectangleHighlighterAnnotationButton',
        :'enable_freehand_highlighter_annotation_button' => :'EnableFreehandHighlighterAnnotationButton',
        :'enable_rubber_stamp_annotation_button' => :'EnableRubberStampAnnotationButton',
        :'enable_rectangle_annotation_button' => :'EnableRectangleAnnotationButton',
        :'enable_ellipse_annotation_button' => :'EnableEllipseAnnotationButton',
        :'enable_line_annotation_button' => :'EnableLineAnnotationButton',
        :'enable_connected_line_annotation_button' => :'EnableConnectedLineAnnotationButton',
        :'enable_freehand_annotation_button' => :'EnableFreehandAnnotationButton',
        :'enable_line_arrow_annotation_button' => :'EnableLineArrowAnnotationButton',
        :'enable_link_annotation_button' => :'EnableLinkAnnotationButton',
        :'enable_ruler_annotation_button' => :'EnableRulerAnnotationButton',
        :'enable_poly_ruler_annotation_button' => :'EnablePolyRulerAnnotationButton',
        :'enable_text_annotation_button' => :'EnableTextAnnotationButton',
        :'enable_sticky_note_annotation_button' => :'EnableStickyNoteAnnotationButton',
        :'enable_twain_acquisition_button' => :'EnableTwainAcquisitionButton',
        :'twain_source_enable_custom_configuration' => :'TwainSourceEnableCustomConfiguration',
        :'twain_source_select_feeder' => :'TwainSourceSelectFeeder',
        :'twain_source_bit_depth' => :'TwainSourceBitDepth',
        :'twain_source_resolution' => :'TwainSourceResolution',
        :'twain_source_enable_duplex' => :'TwainSourceEnableDuplex',
        :'twain_source_hide_ui' => :'TwainSourceHideUI',
        :'free_hand_continuous_drawing_mode' => :'FreeHandContinuousDrawingMode',
        :'show_text_search_snap_in' => :'ShowTextSearchSnapIn',
        :'show_thumbnails_snap_in' => :'ShowThumbnailsSnapIn',
        :'show_bookmarks_snap_in' => :'ShowBookmarksSnapIn',
        :'show_annotations_snap_in' => :'ShowAnnotationsSnapIn',
        :'show_annotations_comments_snap_in' => :'ShowAnnotationsCommentsSnapIn',
        :'show_redaction_snap_in' => :'ShowRedactionSnapIn',
        :'show_digital_signature_snap_in' => :'ShowDigitalSignatureSnapIn',
        :'thumbnail_width' => :'ThumbnailWidth',
        :'thumbnail_height' => :'ThumbnailHeight',
        :'snap_in_panel_default_width' => :'SnapInPanelDefaultWidth',
        :'collapsed_snap_in' => :'CollapsedSnapIn',
        :'collapse_snapin_on_document_closed' => :'CollapseSnapinOnDocumentClosed',
        :'show_snap_in_collapse_button' => :'ShowSnapInCollapseButton',
        :'show_snap_in_panel_header' => :'ShowSnapInPanelHeader',
        :'show_snap_in_button_strip' => :'ShowSnapInButtonStrip',
        :'show_toolbar' => :'ShowToolbar',
        :'toolbar_style' => :'ToolbarStyle',
        :'toolbar_buttons_spacing' => :'ToolbarButtonsSpacing',
        :'toolbar_height' => :'ToolbarHeight',
        :'stroke_color' => :'StrokeColor',
        :'misc_border_color' => :'MiscBorderColor',
        :'header_color' => :'HeaderColor',
        :'panel_back_color' => :'PanelBackColor',
        :'viewer_back_color' => :'ViewerBackColor',
        :'active_selected_color' => :'ActiveSelectedColor',
        :'toolbar_back_color' => :'ToolbarBackColor',
        :'custom_notification_icon_error' => :'CustomNotificationIconError',
        :'custom_notification_icon_question' => :'CustomNotificationIconQuestion',
        :'custom_notification_icon_warning' => :'CustomNotificationIconWarning',
        :'custom_notification_icon_info' => :'CustomNotificationIconInfo',
        :'custom_notification_icon_ok' => :'CustomNotificationIconOk',
        :'allowed_export_formats' => :'AllowedExportFormats',
        :'disable_annotation_drawing_mode_panel' => :'DisableAnnotationDrawingModePanel',
        :'image_quality' => :'ImageQuality',
        :'print_quality' => :'PrintQuality',
        :'enable_documents_drop' => :'EnableDocumentsDrop',
        :'ajax_custom_headers' => :'AjaxCustomHeaders',
        :'file_download_custom_headers' => :'FileDownloadCustomHeaders',
        :'text_search_max_results' => :'TextSearchMaxResults',
        :'max_upload_size' => :'MaxUploadSize',
        :'max_download_size' => :'MaxDownloadSize',
        :'max_pages' => :'MaxPages',
        :'certificates' => :'Certificates',
        :'extra_features' => :'ExtraFeatures'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'timeout' => :'Integer',
        :'control_id' => :'String',
        :'show_logo' => :'Boolean',
        :'remote_ip' => :'String',
        :'file_hosting_uri' => :'String',
        :'document_uri' => :'String',
        :'document_file_name' => :'String',
        :'disable_download_progress' => :'Boolean',
        :'document_alignment' => :'DocumentAlignment',
        :'document_position' => :'DocumentPosition',
        :'enable_gd_picture_annotations' => :'Boolean',
        :'disable_annotation_printing' => :'Boolean',
        :'enable_form_fields_edition' => :'Boolean',
        :'annotation_editor_mode' => :'Boolean',
        :'link_annotation_click_behaviour' => :'LinkAnnotationClickBehaviour',
        :'zoom' => :'Float',
        :'zoom_mode' => :'ViewerZoomMode',
        :'open_zoom_mode' => :'ViewerZoomMode',
        :'view_rotation' => :'RotateFlip',
        :'page_rotation' => :'RotateFlip',
        :'zoom_step' => :'Integer',
        :'scroll_bars' => :'Boolean',
        :'force_scroll_bars' => :'Boolean',
        :'page_view_mode' => :'PageViewMode',
        :'enable_text_selection' => :'Boolean',
        :'enable_text_selection_annotation' => :'Boolean',
        :'locale' => :'DocuViewareLocale',
        :'user_languages' => :'Array<String>',
        :'control_width' => :'String',
        :'control_height' => :'String',
        :'annotation_drop_shadow' => :'Boolean',
        :'allow_print' => :'Boolean',
        :'allow_upload' => :'Boolean',
        :'enable_multiple_thumbnail_selection' => :'Boolean',
        :'enable_thumbnail_drag_drop' => :'Boolean',
        :'enable_file_upload_button' => :'Boolean',
        :'enable_load_from_uri_button' => :'Boolean',
        :'enable_save_button' => :'Boolean',
        :'enable_pages_navigation_buttons' => :'Boolean',
        :'enable_print_button' => :'Boolean',
        :'enable_print_to_pdf' => :'Boolean',
        :'enable_fit_width_button' => :'Boolean',
        :'enable_zoom100_button' => :'Boolean',
        :'enable_mouse_mode_buttons' => :'Boolean',
        :'enable_pan_mode_button' => :'Boolean',
        :'enable_select_mode_button' => :'Boolean',
        :'enable_marquee_zoom_mode_button' => :'Boolean',
        :'enable_full_screen_button' => :'Boolean',
        :'enable_fit_page_button' => :'Boolean',
        :'enable_zoom_buttons' => :'Boolean',
        :'enable_page_view_buttons' => :'Boolean',
        :'rotate_buttons_mode' => :'RotateMode',
        :'enable_rotate_buttons' => :'Boolean',
        :'enable_annotation_action_buttons' => :'Boolean',
        :'enable_selected_text_annotation_edition' => :'Boolean',
        :'enable_rectangle_highlighter_annotation_button' => :'Boolean',
        :'enable_freehand_highlighter_annotation_button' => :'Boolean',
        :'enable_rubber_stamp_annotation_button' => :'Boolean',
        :'enable_rectangle_annotation_button' => :'Boolean',
        :'enable_ellipse_annotation_button' => :'Boolean',
        :'enable_line_annotation_button' => :'Boolean',
        :'enable_connected_line_annotation_button' => :'Boolean',
        :'enable_freehand_annotation_button' => :'Boolean',
        :'enable_line_arrow_annotation_button' => :'Boolean',
        :'enable_link_annotation_button' => :'Boolean',
        :'enable_ruler_annotation_button' => :'Boolean',
        :'enable_poly_ruler_annotation_button' => :'Boolean',
        :'enable_text_annotation_button' => :'Boolean',
        :'enable_sticky_note_annotation_button' => :'Boolean',
        :'enable_twain_acquisition_button' => :'Boolean',
        :'twain_source_enable_custom_configuration' => :'Boolean',
        :'twain_source_select_feeder' => :'Boolean',
        :'twain_source_bit_depth' => :'Integer',
        :'twain_source_resolution' => :'Integer',
        :'twain_source_enable_duplex' => :'Boolean',
        :'twain_source_hide_ui' => :'Boolean',
        :'free_hand_continuous_drawing_mode' => :'Boolean',
        :'show_text_search_snap_in' => :'Boolean',
        :'show_thumbnails_snap_in' => :'Boolean',
        :'show_bookmarks_snap_in' => :'Boolean',
        :'show_annotations_snap_in' => :'Boolean',
        :'show_annotations_comments_snap_in' => :'Boolean',
        :'show_redaction_snap_in' => :'Boolean',
        :'show_digital_signature_snap_in' => :'Boolean',
        :'thumbnail_width' => :'Integer',
        :'thumbnail_height' => :'Integer',
        :'snap_in_panel_default_width' => :'String',
        :'collapsed_snap_in' => :'Boolean',
        :'collapse_snapin_on_document_closed' => :'Boolean',
        :'show_snap_in_collapse_button' => :'Boolean',
        :'show_snap_in_panel_header' => :'Boolean',
        :'show_snap_in_button_strip' => :'Boolean',
        :'show_toolbar' => :'Boolean',
        :'toolbar_style' => :'ToolbarStyle',
        :'toolbar_buttons_spacing' => :'Integer',
        :'toolbar_height' => :'Integer',
        :'stroke_color' => :'String',
        :'misc_border_color' => :'String',
        :'header_color' => :'String',
        :'panel_back_color' => :'String',
        :'viewer_back_color' => :'String',
        :'active_selected_color' => :'String',
        :'toolbar_back_color' => :'String',
        :'custom_notification_icon_error' => :'String',
        :'custom_notification_icon_question' => :'String',
        :'custom_notification_icon_warning' => :'String',
        :'custom_notification_icon_info' => :'String',
        :'custom_notification_icon_ok' => :'String',
        :'allowed_export_formats' => :'String',
        :'disable_annotation_drawing_mode_panel' => :'Boolean',
        :'image_quality' => :'Integer',
        :'print_quality' => :'PrintQuality',
        :'enable_documents_drop' => :'Boolean',
        :'ajax_custom_headers' => :'String',
        :'file_download_custom_headers' => :'String',
        :'text_search_max_results' => :'Integer',
        :'max_upload_size' => :'Integer',
        :'max_download_size' => :'Integer',
        :'max_pages' => :'Integer',
        :'certificates' => :'Array<DocuViewareCertificate>',
        :'extra_features' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'control_id',
        :'remote_ip',
        :'file_hosting_uri',
        :'document_uri',
        :'document_file_name',
        :'user_languages',
        :'control_width',
        :'control_height',
        :'snap_in_panel_default_width',
        :'stroke_color',
        :'misc_border_color',
        :'header_color',
        :'panel_back_color',
        :'viewer_back_color',
        :'active_selected_color',
        :'toolbar_back_color',
        :'custom_notification_icon_error',
        :'custom_notification_icon_question',
        :'custom_notification_icon_warning',
        :'custom_notification_icon_info',
        :'custom_notification_icon_ok',
        :'allowed_export_formats',
        :'ajax_custom_headers',
        :'file_download_custom_headers',
        :'certificates',
        :'extra_features'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::DocuViewareControlState` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::DocuViewareControlState`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'timeout')
        self.timeout = attributes[:'timeout']
      else
        self.timeout = 20
      end

      if attributes.key?(:'control_id')
        self.control_id = attributes[:'control_id']
      else
        self.control_id = 'DocuVieware1'
      end

      if attributes.key?(:'show_logo')
        self.show_logo = attributes[:'show_logo']
      else
        self.show_logo = true
      end

      if attributes.key?(:'remote_ip')
        self.remote_ip = attributes[:'remote_ip']
      else
        self.remote_ip = ''
      end

      if attributes.key?(:'file_hosting_uri')
        self.file_hosting_uri = attributes[:'file_hosting_uri']
      else
        self.file_hosting_uri = ''
      end

      if attributes.key?(:'document_uri')
        self.document_uri = attributes[:'document_uri']
      else
        self.document_uri = ''
      end

      if attributes.key?(:'document_file_name')
        self.document_file_name = attributes[:'document_file_name']
      else
        self.document_file_name = ''
      end

      if attributes.key?(:'disable_download_progress')
        self.disable_download_progress = attributes[:'disable_download_progress']
      else
        self.disable_download_progress = false
      end

      if attributes.key?(:'document_alignment')
        self.document_alignment = attributes[:'document_alignment']
      end

      if attributes.key?(:'document_position')
        self.document_position = attributes[:'document_position']
      end

      if attributes.key?(:'enable_gd_picture_annotations')
        self.enable_gd_picture_annotations = attributes[:'enable_gd_picture_annotations']
      else
        self.enable_gd_picture_annotations = true
      end

      if attributes.key?(:'disable_annotation_printing')
        self.disable_annotation_printing = attributes[:'disable_annotation_printing']
      else
        self.disable_annotation_printing = false
      end

      if attributes.key?(:'enable_form_fields_edition')
        self.enable_form_fields_edition = attributes[:'enable_form_fields_edition']
      else
        self.enable_form_fields_edition = true
      end

      if attributes.key?(:'annotation_editor_mode')
        self.annotation_editor_mode = attributes[:'annotation_editor_mode']
      else
        self.annotation_editor_mode = true
      end

      if attributes.key?(:'link_annotation_click_behaviour')
        self.link_annotation_click_behaviour = attributes[:'link_annotation_click_behaviour']
      end

      if attributes.key?(:'zoom')
        self.zoom = attributes[:'zoom']
      else
        self.zoom = 1
      end

      if attributes.key?(:'zoom_mode')
        self.zoom_mode = attributes[:'zoom_mode']
      end

      if attributes.key?(:'open_zoom_mode')
        self.open_zoom_mode = attributes[:'open_zoom_mode']
      end

      if attributes.key?(:'view_rotation')
        self.view_rotation = attributes[:'view_rotation']
      end

      if attributes.key?(:'page_rotation')
        self.page_rotation = attributes[:'page_rotation']
      end

      if attributes.key?(:'zoom_step')
        self.zoom_step = attributes[:'zoom_step']
      else
        self.zoom_step = 30
      end

      if attributes.key?(:'scroll_bars')
        self.scroll_bars = attributes[:'scroll_bars']
      else
        self.scroll_bars = true
      end

      if attributes.key?(:'force_scroll_bars')
        self.force_scroll_bars = attributes[:'force_scroll_bars']
      else
        self.force_scroll_bars = false
      end

      if attributes.key?(:'page_view_mode')
        self.page_view_mode = attributes[:'page_view_mode']
      end

      if attributes.key?(:'enable_text_selection')
        self.enable_text_selection = attributes[:'enable_text_selection']
      else
        self.enable_text_selection = true
      end

      if attributes.key?(:'enable_text_selection_annotation')
        self.enable_text_selection_annotation = attributes[:'enable_text_selection_annotation']
      else
        self.enable_text_selection_annotation = true
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'user_languages')
        if (value = attributes[:'user_languages']).is_a?(Array)
          self.user_languages = value
        end
      end

      if attributes.key?(:'control_width')
        self.control_width = attributes[:'control_width']
      else
        self.control_width = '100%'
      end

      if attributes.key?(:'control_height')
        self.control_height = attributes[:'control_height']
      else
        self.control_height = '100%'
      end

      if attributes.key?(:'annotation_drop_shadow')
        self.annotation_drop_shadow = attributes[:'annotation_drop_shadow']
      else
        self.annotation_drop_shadow = true
      end

      if attributes.key?(:'allow_print')
        self.allow_print = attributes[:'allow_print']
      else
        self.allow_print = true
      end

      if attributes.key?(:'allow_upload')
        self.allow_upload = attributes[:'allow_upload']
      else
        self.allow_upload = true
      end

      if attributes.key?(:'enable_multiple_thumbnail_selection')
        self.enable_multiple_thumbnail_selection = attributes[:'enable_multiple_thumbnail_selection']
      else
        self.enable_multiple_thumbnail_selection = false
      end

      if attributes.key?(:'enable_thumbnail_drag_drop')
        self.enable_thumbnail_drag_drop = attributes[:'enable_thumbnail_drag_drop']
      else
        self.enable_thumbnail_drag_drop = false
      end

      if attributes.key?(:'enable_file_upload_button')
        self.enable_file_upload_button = attributes[:'enable_file_upload_button']
      else
        self.enable_file_upload_button = true
      end

      if attributes.key?(:'enable_load_from_uri_button')
        self.enable_load_from_uri_button = attributes[:'enable_load_from_uri_button']
      else
        self.enable_load_from_uri_button = true
      end

      if attributes.key?(:'enable_save_button')
        self.enable_save_button = attributes[:'enable_save_button']
      else
        self.enable_save_button = true
      end

      if attributes.key?(:'enable_pages_navigation_buttons')
        self.enable_pages_navigation_buttons = attributes[:'enable_pages_navigation_buttons']
      else
        self.enable_pages_navigation_buttons = true
      end

      if attributes.key?(:'enable_print_button')
        self.enable_print_button = attributes[:'enable_print_button']
      else
        self.enable_print_button = true
      end

      if attributes.key?(:'enable_print_to_pdf')
        self.enable_print_to_pdf = attributes[:'enable_print_to_pdf']
      else
        self.enable_print_to_pdf = true
      end

      if attributes.key?(:'enable_fit_width_button')
        self.enable_fit_width_button = attributes[:'enable_fit_width_button']
      else
        self.enable_fit_width_button = true
      end

      if attributes.key?(:'enable_zoom100_button')
        self.enable_zoom100_button = attributes[:'enable_zoom100_button']
      else
        self.enable_zoom100_button = true
      end

      if attributes.key?(:'enable_mouse_mode_buttons')
        self.enable_mouse_mode_buttons = attributes[:'enable_mouse_mode_buttons']
      else
        self.enable_mouse_mode_buttons = true
      end

      if attributes.key?(:'enable_pan_mode_button')
        self.enable_pan_mode_button = attributes[:'enable_pan_mode_button']
      else
        self.enable_pan_mode_button = true
      end

      if attributes.key?(:'enable_select_mode_button')
        self.enable_select_mode_button = attributes[:'enable_select_mode_button']
      else
        self.enable_select_mode_button = true
      end

      if attributes.key?(:'enable_marquee_zoom_mode_button')
        self.enable_marquee_zoom_mode_button = attributes[:'enable_marquee_zoom_mode_button']
      else
        self.enable_marquee_zoom_mode_button = true
      end

      if attributes.key?(:'enable_full_screen_button')
        self.enable_full_screen_button = attributes[:'enable_full_screen_button']
      else
        self.enable_full_screen_button = true
      end

      if attributes.key?(:'enable_fit_page_button')
        self.enable_fit_page_button = attributes[:'enable_fit_page_button']
      else
        self.enable_fit_page_button = true
      end

      if attributes.key?(:'enable_zoom_buttons')
        self.enable_zoom_buttons = attributes[:'enable_zoom_buttons']
      else
        self.enable_zoom_buttons = true
      end

      if attributes.key?(:'enable_page_view_buttons')
        self.enable_page_view_buttons = attributes[:'enable_page_view_buttons']
      else
        self.enable_page_view_buttons = true
      end

      if attributes.key?(:'rotate_buttons_mode')
        self.rotate_buttons_mode = attributes[:'rotate_buttons_mode']
      end

      if attributes.key?(:'enable_rotate_buttons')
        self.enable_rotate_buttons = attributes[:'enable_rotate_buttons']
      else
        self.enable_rotate_buttons = true
      end

      if attributes.key?(:'enable_annotation_action_buttons')
        self.enable_annotation_action_buttons = attributes[:'enable_annotation_action_buttons']
      else
        self.enable_annotation_action_buttons = true
      end

      if attributes.key?(:'enable_selected_text_annotation_edition')
        self.enable_selected_text_annotation_edition = attributes[:'enable_selected_text_annotation_edition']
      else
        self.enable_selected_text_annotation_edition = true
      end

      if attributes.key?(:'enable_rectangle_highlighter_annotation_button')
        self.enable_rectangle_highlighter_annotation_button = attributes[:'enable_rectangle_highlighter_annotation_button']
      else
        self.enable_rectangle_highlighter_annotation_button = true
      end

      if attributes.key?(:'enable_freehand_highlighter_annotation_button')
        self.enable_freehand_highlighter_annotation_button = attributes[:'enable_freehand_highlighter_annotation_button']
      else
        self.enable_freehand_highlighter_annotation_button = true
      end

      if attributes.key?(:'enable_rubber_stamp_annotation_button')
        self.enable_rubber_stamp_annotation_button = attributes[:'enable_rubber_stamp_annotation_button']
      else
        self.enable_rubber_stamp_annotation_button = true
      end

      if attributes.key?(:'enable_rectangle_annotation_button')
        self.enable_rectangle_annotation_button = attributes[:'enable_rectangle_annotation_button']
      else
        self.enable_rectangle_annotation_button = true
      end

      if attributes.key?(:'enable_ellipse_annotation_button')
        self.enable_ellipse_annotation_button = attributes[:'enable_ellipse_annotation_button']
      else
        self.enable_ellipse_annotation_button = true
      end

      if attributes.key?(:'enable_line_annotation_button')
        self.enable_line_annotation_button = attributes[:'enable_line_annotation_button']
      else
        self.enable_line_annotation_button = true
      end

      if attributes.key?(:'enable_connected_line_annotation_button')
        self.enable_connected_line_annotation_button = attributes[:'enable_connected_line_annotation_button']
      else
        self.enable_connected_line_annotation_button = true
      end

      if attributes.key?(:'enable_freehand_annotation_button')
        self.enable_freehand_annotation_button = attributes[:'enable_freehand_annotation_button']
      else
        self.enable_freehand_annotation_button = true
      end

      if attributes.key?(:'enable_line_arrow_annotation_button')
        self.enable_line_arrow_annotation_button = attributes[:'enable_line_arrow_annotation_button']
      else
        self.enable_line_arrow_annotation_button = true
      end

      if attributes.key?(:'enable_link_annotation_button')
        self.enable_link_annotation_button = attributes[:'enable_link_annotation_button']
      else
        self.enable_link_annotation_button = true
      end

      if attributes.key?(:'enable_ruler_annotation_button')
        self.enable_ruler_annotation_button = attributes[:'enable_ruler_annotation_button']
      else
        self.enable_ruler_annotation_button = true
      end

      if attributes.key?(:'enable_poly_ruler_annotation_button')
        self.enable_poly_ruler_annotation_button = attributes[:'enable_poly_ruler_annotation_button']
      else
        self.enable_poly_ruler_annotation_button = true
      end

      if attributes.key?(:'enable_text_annotation_button')
        self.enable_text_annotation_button = attributes[:'enable_text_annotation_button']
      else
        self.enable_text_annotation_button = true
      end

      if attributes.key?(:'enable_sticky_note_annotation_button')
        self.enable_sticky_note_annotation_button = attributes[:'enable_sticky_note_annotation_button']
      else
        self.enable_sticky_note_annotation_button = true
      end

      if attributes.key?(:'enable_twain_acquisition_button')
        self.enable_twain_acquisition_button = attributes[:'enable_twain_acquisition_button']
      else
        self.enable_twain_acquisition_button = true
      end

      if attributes.key?(:'twain_source_enable_custom_configuration')
        self.twain_source_enable_custom_configuration = attributes[:'twain_source_enable_custom_configuration']
      else
        self.twain_source_enable_custom_configuration = false
      end

      if attributes.key?(:'twain_source_select_feeder')
        self.twain_source_select_feeder = attributes[:'twain_source_select_feeder']
      else
        self.twain_source_select_feeder = true
      end

      if attributes.key?(:'twain_source_bit_depth')
        self.twain_source_bit_depth = attributes[:'twain_source_bit_depth']
      else
        self.twain_source_bit_depth = 24
      end

      if attributes.key?(:'twain_source_resolution')
        self.twain_source_resolution = attributes[:'twain_source_resolution']
      else
        self.twain_source_resolution = 200
      end

      if attributes.key?(:'twain_source_enable_duplex')
        self.twain_source_enable_duplex = attributes[:'twain_source_enable_duplex']
      else
        self.twain_source_enable_duplex = false
      end

      if attributes.key?(:'twain_source_hide_ui')
        self.twain_source_hide_ui = attributes[:'twain_source_hide_ui']
      else
        self.twain_source_hide_ui = true
      end

      if attributes.key?(:'free_hand_continuous_drawing_mode')
        self.free_hand_continuous_drawing_mode = attributes[:'free_hand_continuous_drawing_mode']
      else
        self.free_hand_continuous_drawing_mode = true
      end

      if attributes.key?(:'show_text_search_snap_in')
        self.show_text_search_snap_in = attributes[:'show_text_search_snap_in']
      else
        self.show_text_search_snap_in = true
      end

      if attributes.key?(:'show_thumbnails_snap_in')
        self.show_thumbnails_snap_in = attributes[:'show_thumbnails_snap_in']
      else
        self.show_thumbnails_snap_in = true
      end

      if attributes.key?(:'show_bookmarks_snap_in')
        self.show_bookmarks_snap_in = attributes[:'show_bookmarks_snap_in']
      else
        self.show_bookmarks_snap_in = true
      end

      if attributes.key?(:'show_annotations_snap_in')
        self.show_annotations_snap_in = attributes[:'show_annotations_snap_in']
      else
        self.show_annotations_snap_in = true
      end

      if attributes.key?(:'show_annotations_comments_snap_in')
        self.show_annotations_comments_snap_in = attributes[:'show_annotations_comments_snap_in']
      else
        self.show_annotations_comments_snap_in = true
      end

      if attributes.key?(:'show_redaction_snap_in')
        self.show_redaction_snap_in = attributes[:'show_redaction_snap_in']
      else
        self.show_redaction_snap_in = true
      end

      if attributes.key?(:'show_digital_signature_snap_in')
        self.show_digital_signature_snap_in = attributes[:'show_digital_signature_snap_in']
      else
        self.show_digital_signature_snap_in = false
      end

      if attributes.key?(:'thumbnail_width')
        self.thumbnail_width = attributes[:'thumbnail_width']
      else
        self.thumbnail_width = 192
      end

      if attributes.key?(:'thumbnail_height')
        self.thumbnail_height = attributes[:'thumbnail_height']
      else
        self.thumbnail_height = 256
      end

      if attributes.key?(:'snap_in_panel_default_width')
        self.snap_in_panel_default_width = attributes[:'snap_in_panel_default_width']
      else
        self.snap_in_panel_default_width = '280px'
      end

      if attributes.key?(:'collapsed_snap_in')
        self.collapsed_snap_in = attributes[:'collapsed_snap_in']
      else
        self.collapsed_snap_in = false
      end

      if attributes.key?(:'collapse_snapin_on_document_closed')
        self.collapse_snapin_on_document_closed = attributes[:'collapse_snapin_on_document_closed']
      else
        self.collapse_snapin_on_document_closed = true
      end

      if attributes.key?(:'show_snap_in_collapse_button')
        self.show_snap_in_collapse_button = attributes[:'show_snap_in_collapse_button']
      else
        self.show_snap_in_collapse_button = true
      end

      if attributes.key?(:'show_snap_in_panel_header')
        self.show_snap_in_panel_header = attributes[:'show_snap_in_panel_header']
      else
        self.show_snap_in_panel_header = true
      end

      if attributes.key?(:'show_snap_in_button_strip')
        self.show_snap_in_button_strip = attributes[:'show_snap_in_button_strip']
      else
        self.show_snap_in_button_strip = true
      end

      if attributes.key?(:'show_toolbar')
        self.show_toolbar = attributes[:'show_toolbar']
      else
        self.show_toolbar = true
      end

      if attributes.key?(:'toolbar_style')
        self.toolbar_style = attributes[:'toolbar_style']
      end

      if attributes.key?(:'toolbar_buttons_spacing')
        self.toolbar_buttons_spacing = attributes[:'toolbar_buttons_spacing']
      else
        self.toolbar_buttons_spacing = 12
      end

      if attributes.key?(:'toolbar_height')
        self.toolbar_height = attributes[:'toolbar_height']
      else
        self.toolbar_height = 48
      end

      if attributes.key?(:'stroke_color')
        self.stroke_color = attributes[:'stroke_color']
      else
        self.stroke_color = '#646464'
      end

      if attributes.key?(:'misc_border_color')
        self.misc_border_color = attributes[:'misc_border_color']
      else
        self.misc_border_color = '#DCDCDC'
      end

      if attributes.key?(:'header_color')
        self.header_color = attributes[:'header_color']
      else
        self.header_color = '#213E4E'
      end

      if attributes.key?(:'panel_back_color')
        self.panel_back_color = attributes[:'panel_back_color']
      else
        self.panel_back_color = '#FFFFFF'
      end

      if attributes.key?(:'viewer_back_color')
        self.viewer_back_color = attributes[:'viewer_back_color']
      else
        self.viewer_back_color = '#565656'
      end

      if attributes.key?(:'active_selected_color')
        self.active_selected_color = attributes[:'active_selected_color']
      else
        self.active_selected_color = '#0382D4'
      end

      if attributes.key?(:'toolbar_back_color')
        self.toolbar_back_color = attributes[:'toolbar_back_color']
      else
        self.toolbar_back_color = '#F2F2F2'
      end

      if attributes.key?(:'custom_notification_icon_error')
        self.custom_notification_icon_error = attributes[:'custom_notification_icon_error']
      else
        self.custom_notification_icon_error = ''
      end

      if attributes.key?(:'custom_notification_icon_question')
        self.custom_notification_icon_question = attributes[:'custom_notification_icon_question']
      else
        self.custom_notification_icon_question = ''
      end

      if attributes.key?(:'custom_notification_icon_warning')
        self.custom_notification_icon_warning = attributes[:'custom_notification_icon_warning']
      else
        self.custom_notification_icon_warning = ''
      end

      if attributes.key?(:'custom_notification_icon_info')
        self.custom_notification_icon_info = attributes[:'custom_notification_icon_info']
      else
        self.custom_notification_icon_info = ''
      end

      if attributes.key?(:'custom_notification_icon_ok')
        self.custom_notification_icon_ok = attributes[:'custom_notification_icon_ok']
      else
        self.custom_notification_icon_ok = ''
      end

      if attributes.key?(:'allowed_export_formats')
        self.allowed_export_formats = attributes[:'allowed_export_formats']
      else
        self.allowed_export_formats = '*'
      end

      if attributes.key?(:'disable_annotation_drawing_mode_panel')
        self.disable_annotation_drawing_mode_panel = attributes[:'disable_annotation_drawing_mode_panel']
      else
        self.disable_annotation_drawing_mode_panel = false
      end

      if attributes.key?(:'image_quality')
        self.image_quality = attributes[:'image_quality']
      else
        self.image_quality = 10
      end

      if attributes.key?(:'print_quality')
        self.print_quality = attributes[:'print_quality']
      end

      if attributes.key?(:'enable_documents_drop')
        self.enable_documents_drop = attributes[:'enable_documents_drop']
      else
        self.enable_documents_drop = true
      end

      if attributes.key?(:'ajax_custom_headers')
        self.ajax_custom_headers = attributes[:'ajax_custom_headers']
      else
        self.ajax_custom_headers = ''
      end

      if attributes.key?(:'file_download_custom_headers')
        self.file_download_custom_headers = attributes[:'file_download_custom_headers']
      else
        self.file_download_custom_headers = ''
      end

      if attributes.key?(:'text_search_max_results')
        self.text_search_max_results = attributes[:'text_search_max_results']
      else
        self.text_search_max_results = 100
      end

      if attributes.key?(:'max_upload_size')
        self.max_upload_size = attributes[:'max_upload_size']
      else
        self.max_upload_size = 10485760
      end

      if attributes.key?(:'max_download_size')
        self.max_download_size = attributes[:'max_download_size']
      else
        self.max_download_size = 10485760
      end

      if attributes.key?(:'max_pages')
        self.max_pages = attributes[:'max_pages']
      else
        self.max_pages = 3000
      end

      if attributes.key?(:'certificates')
        if (value = attributes[:'certificates']).is_a?(Array)
          self.certificates = value
        end
      end

      if attributes.key?(:'extra_features')
        self.extra_features = attributes[:'extra_features']
      else
        self.extra_features = ''
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timeout == o.timeout &&
          control_id == o.control_id &&
          show_logo == o.show_logo &&
          remote_ip == o.remote_ip &&
          file_hosting_uri == o.file_hosting_uri &&
          document_uri == o.document_uri &&
          document_file_name == o.document_file_name &&
          disable_download_progress == o.disable_download_progress &&
          document_alignment == o.document_alignment &&
          document_position == o.document_position &&
          enable_gd_picture_annotations == o.enable_gd_picture_annotations &&
          disable_annotation_printing == o.disable_annotation_printing &&
          enable_form_fields_edition == o.enable_form_fields_edition &&
          annotation_editor_mode == o.annotation_editor_mode &&
          link_annotation_click_behaviour == o.link_annotation_click_behaviour &&
          zoom == o.zoom &&
          zoom_mode == o.zoom_mode &&
          open_zoom_mode == o.open_zoom_mode &&
          view_rotation == o.view_rotation &&
          page_rotation == o.page_rotation &&
          zoom_step == o.zoom_step &&
          scroll_bars == o.scroll_bars &&
          force_scroll_bars == o.force_scroll_bars &&
          page_view_mode == o.page_view_mode &&
          enable_text_selection == o.enable_text_selection &&
          enable_text_selection_annotation == o.enable_text_selection_annotation &&
          locale == o.locale &&
          user_languages == o.user_languages &&
          control_width == o.control_width &&
          control_height == o.control_height &&
          annotation_drop_shadow == o.annotation_drop_shadow &&
          allow_print == o.allow_print &&
          allow_upload == o.allow_upload &&
          enable_multiple_thumbnail_selection == o.enable_multiple_thumbnail_selection &&
          enable_thumbnail_drag_drop == o.enable_thumbnail_drag_drop &&
          enable_file_upload_button == o.enable_file_upload_button &&
          enable_load_from_uri_button == o.enable_load_from_uri_button &&
          enable_save_button == o.enable_save_button &&
          enable_pages_navigation_buttons == o.enable_pages_navigation_buttons &&
          enable_print_button == o.enable_print_button &&
          enable_print_to_pdf == o.enable_print_to_pdf &&
          enable_fit_width_button == o.enable_fit_width_button &&
          enable_zoom100_button == o.enable_zoom100_button &&
          enable_mouse_mode_buttons == o.enable_mouse_mode_buttons &&
          enable_pan_mode_button == o.enable_pan_mode_button &&
          enable_select_mode_button == o.enable_select_mode_button &&
          enable_marquee_zoom_mode_button == o.enable_marquee_zoom_mode_button &&
          enable_full_screen_button == o.enable_full_screen_button &&
          enable_fit_page_button == o.enable_fit_page_button &&
          enable_zoom_buttons == o.enable_zoom_buttons &&
          enable_page_view_buttons == o.enable_page_view_buttons &&
          rotate_buttons_mode == o.rotate_buttons_mode &&
          enable_rotate_buttons == o.enable_rotate_buttons &&
          enable_annotation_action_buttons == o.enable_annotation_action_buttons &&
          enable_selected_text_annotation_edition == o.enable_selected_text_annotation_edition &&
          enable_rectangle_highlighter_annotation_button == o.enable_rectangle_highlighter_annotation_button &&
          enable_freehand_highlighter_annotation_button == o.enable_freehand_highlighter_annotation_button &&
          enable_rubber_stamp_annotation_button == o.enable_rubber_stamp_annotation_button &&
          enable_rectangle_annotation_button == o.enable_rectangle_annotation_button &&
          enable_ellipse_annotation_button == o.enable_ellipse_annotation_button &&
          enable_line_annotation_button == o.enable_line_annotation_button &&
          enable_connected_line_annotation_button == o.enable_connected_line_annotation_button &&
          enable_freehand_annotation_button == o.enable_freehand_annotation_button &&
          enable_line_arrow_annotation_button == o.enable_line_arrow_annotation_button &&
          enable_link_annotation_button == o.enable_link_annotation_button &&
          enable_ruler_annotation_button == o.enable_ruler_annotation_button &&
          enable_poly_ruler_annotation_button == o.enable_poly_ruler_annotation_button &&
          enable_text_annotation_button == o.enable_text_annotation_button &&
          enable_sticky_note_annotation_button == o.enable_sticky_note_annotation_button &&
          enable_twain_acquisition_button == o.enable_twain_acquisition_button &&
          twain_source_enable_custom_configuration == o.twain_source_enable_custom_configuration &&
          twain_source_select_feeder == o.twain_source_select_feeder &&
          twain_source_bit_depth == o.twain_source_bit_depth &&
          twain_source_resolution == o.twain_source_resolution &&
          twain_source_enable_duplex == o.twain_source_enable_duplex &&
          twain_source_hide_ui == o.twain_source_hide_ui &&
          free_hand_continuous_drawing_mode == o.free_hand_continuous_drawing_mode &&
          show_text_search_snap_in == o.show_text_search_snap_in &&
          show_thumbnails_snap_in == o.show_thumbnails_snap_in &&
          show_bookmarks_snap_in == o.show_bookmarks_snap_in &&
          show_annotations_snap_in == o.show_annotations_snap_in &&
          show_annotations_comments_snap_in == o.show_annotations_comments_snap_in &&
          show_redaction_snap_in == o.show_redaction_snap_in &&
          show_digital_signature_snap_in == o.show_digital_signature_snap_in &&
          thumbnail_width == o.thumbnail_width &&
          thumbnail_height == o.thumbnail_height &&
          snap_in_panel_default_width == o.snap_in_panel_default_width &&
          collapsed_snap_in == o.collapsed_snap_in &&
          collapse_snapin_on_document_closed == o.collapse_snapin_on_document_closed &&
          show_snap_in_collapse_button == o.show_snap_in_collapse_button &&
          show_snap_in_panel_header == o.show_snap_in_panel_header &&
          show_snap_in_button_strip == o.show_snap_in_button_strip &&
          show_toolbar == o.show_toolbar &&
          toolbar_style == o.toolbar_style &&
          toolbar_buttons_spacing == o.toolbar_buttons_spacing &&
          toolbar_height == o.toolbar_height &&
          stroke_color == o.stroke_color &&
          misc_border_color == o.misc_border_color &&
          header_color == o.header_color &&
          panel_back_color == o.panel_back_color &&
          viewer_back_color == o.viewer_back_color &&
          active_selected_color == o.active_selected_color &&
          toolbar_back_color == o.toolbar_back_color &&
          custom_notification_icon_error == o.custom_notification_icon_error &&
          custom_notification_icon_question == o.custom_notification_icon_question &&
          custom_notification_icon_warning == o.custom_notification_icon_warning &&
          custom_notification_icon_info == o.custom_notification_icon_info &&
          custom_notification_icon_ok == o.custom_notification_icon_ok &&
          allowed_export_formats == o.allowed_export_formats &&
          disable_annotation_drawing_mode_panel == o.disable_annotation_drawing_mode_panel &&
          image_quality == o.image_quality &&
          print_quality == o.print_quality &&
          enable_documents_drop == o.enable_documents_drop &&
          ajax_custom_headers == o.ajax_custom_headers &&
          file_download_custom_headers == o.file_download_custom_headers &&
          text_search_max_results == o.text_search_max_results &&
          max_upload_size == o.max_upload_size &&
          max_download_size == o.max_download_size &&
          max_pages == o.max_pages &&
          certificates == o.certificates &&
          extra_features == o.extra_features
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [timeout, control_id, show_logo, remote_ip, file_hosting_uri, document_uri, document_file_name, disable_download_progress, document_alignment, document_position, enable_gd_picture_annotations, disable_annotation_printing, enable_form_fields_edition, annotation_editor_mode, link_annotation_click_behaviour, zoom, zoom_mode, open_zoom_mode, view_rotation, page_rotation, zoom_step, scroll_bars, force_scroll_bars, page_view_mode, enable_text_selection, enable_text_selection_annotation, locale, user_languages, control_width, control_height, annotation_drop_shadow, allow_print, allow_upload, enable_multiple_thumbnail_selection, enable_thumbnail_drag_drop, enable_file_upload_button, enable_load_from_uri_button, enable_save_button, enable_pages_navigation_buttons, enable_print_button, enable_print_to_pdf, enable_fit_width_button, enable_zoom100_button, enable_mouse_mode_buttons, enable_pan_mode_button, enable_select_mode_button, enable_marquee_zoom_mode_button, enable_full_screen_button, enable_fit_page_button, enable_zoom_buttons, enable_page_view_buttons, rotate_buttons_mode, enable_rotate_buttons, enable_annotation_action_buttons, enable_selected_text_annotation_edition, enable_rectangle_highlighter_annotation_button, enable_freehand_highlighter_annotation_button, enable_rubber_stamp_annotation_button, enable_rectangle_annotation_button, enable_ellipse_annotation_button, enable_line_annotation_button, enable_connected_line_annotation_button, enable_freehand_annotation_button, enable_line_arrow_annotation_button, enable_link_annotation_button, enable_ruler_annotation_button, enable_poly_ruler_annotation_button, enable_text_annotation_button, enable_sticky_note_annotation_button, enable_twain_acquisition_button, twain_source_enable_custom_configuration, twain_source_select_feeder, twain_source_bit_depth, twain_source_resolution, twain_source_enable_duplex, twain_source_hide_ui, free_hand_continuous_drawing_mode, show_text_search_snap_in, show_thumbnails_snap_in, show_bookmarks_snap_in, show_annotations_snap_in, show_annotations_comments_snap_in, show_redaction_snap_in, show_digital_signature_snap_in, thumbnail_width, thumbnail_height, snap_in_panel_default_width, collapsed_snap_in, collapse_snapin_on_document_closed, show_snap_in_collapse_button, show_snap_in_panel_header, show_snap_in_button_strip, show_toolbar, toolbar_style, toolbar_buttons_spacing, toolbar_height, stroke_color, misc_border_color, header_color, panel_back_color, viewer_back_color, active_selected_color, toolbar_back_color, custom_notification_icon_error, custom_notification_icon_question, custom_notification_icon_warning, custom_notification_icon_info, custom_notification_icon_ok, allowed_export_formats, disable_annotation_drawing_mode_panel, image_quality, print_quality, enable_documents_drop, ajax_custom_headers, file_download_custom_headers, text_search_max_results, max_upload_size, max_download_size, max_pages, certificates, extra_features].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
