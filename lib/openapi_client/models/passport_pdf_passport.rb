=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  class PassportPDFPassport
    attr_accessor :passport_id

    attr_accessor :plan_id

    attr_accessor :optional_linked_subscription_id

    attr_accessor :subscription_date

    attr_accessor :expiration_date

    attr_accessor :current_tokens_used

    attr_accessor :extra_tokens

    attr_accessor :extra_tokens_end_date

    attr_accessor :is_yearly_paid

    attr_accessor :is_active

    attr_accessor :tokens_percent_usage_alert

    attr_accessor :tokens_percent_usage_alert_sent

    attr_accessor :is_managed

    attr_accessor :next_monthly_term

    attr_accessor :remaining_tokens

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'passport_id' => :'PassportId',
        :'plan_id' => :'PlanId',
        :'optional_linked_subscription_id' => :'OptionalLinkedSubscriptionId',
        :'subscription_date' => :'SubscriptionDate',
        :'expiration_date' => :'ExpirationDate',
        :'current_tokens_used' => :'CurrentTokensUsed',
        :'extra_tokens' => :'ExtraTokens',
        :'extra_tokens_end_date' => :'ExtraTokensEndDate',
        :'is_yearly_paid' => :'IsYearlyPaid',
        :'is_active' => :'IsActive',
        :'tokens_percent_usage_alert' => :'TokensPercentUsageAlert',
        :'tokens_percent_usage_alert_sent' => :'TokensPercentUsageAlertSent',
        :'is_managed' => :'IsManaged',
        :'next_monthly_term' => :'NextMonthlyTerm',
        :'remaining_tokens' => :'RemainingTokens'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'passport_id' => :'String',
        :'plan_id' => :'Integer',
        :'optional_linked_subscription_id' => :'String',
        :'subscription_date' => :'DateTime',
        :'expiration_date' => :'DateTime',
        :'current_tokens_used' => :'Integer',
        :'extra_tokens' => :'Integer',
        :'extra_tokens_end_date' => :'DateTime',
        :'is_yearly_paid' => :'Boolean',
        :'is_active' => :'Boolean',
        :'tokens_percent_usage_alert' => :'Integer',
        :'tokens_percent_usage_alert_sent' => :'Boolean',
        :'is_managed' => :'Boolean',
        :'next_monthly_term' => :'DateTime',
        :'remaining_tokens' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'passport_id',
        :'optional_linked_subscription_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PassportPDFPassport` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PassportPDFPassport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'passport_id')
        self.passport_id = attributes[:'passport_id']
      end

      if attributes.key?(:'plan_id')
        self.plan_id = attributes[:'plan_id']
      end

      if attributes.key?(:'optional_linked_subscription_id')
        self.optional_linked_subscription_id = attributes[:'optional_linked_subscription_id']
      end

      if attributes.key?(:'subscription_date')
        self.subscription_date = attributes[:'subscription_date']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'current_tokens_used')
        self.current_tokens_used = attributes[:'current_tokens_used']
      end

      if attributes.key?(:'extra_tokens')
        self.extra_tokens = attributes[:'extra_tokens']
      end

      if attributes.key?(:'extra_tokens_end_date')
        self.extra_tokens_end_date = attributes[:'extra_tokens_end_date']
      end

      if attributes.key?(:'is_yearly_paid')
        self.is_yearly_paid = attributes[:'is_yearly_paid']
      end

      if attributes.key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.key?(:'tokens_percent_usage_alert')
        self.tokens_percent_usage_alert = attributes[:'tokens_percent_usage_alert']
      end

      if attributes.key?(:'tokens_percent_usage_alert_sent')
        self.tokens_percent_usage_alert_sent = attributes[:'tokens_percent_usage_alert_sent']
      end

      if attributes.key?(:'is_managed')
        self.is_managed = attributes[:'is_managed']
      end

      if attributes.key?(:'next_monthly_term')
        self.next_monthly_term = attributes[:'next_monthly_term']
      end

      if attributes.key?(:'remaining_tokens')
        self.remaining_tokens = attributes[:'remaining_tokens']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          passport_id == o.passport_id &&
          plan_id == o.plan_id &&
          optional_linked_subscription_id == o.optional_linked_subscription_id &&
          subscription_date == o.subscription_date &&
          expiration_date == o.expiration_date &&
          current_tokens_used == o.current_tokens_used &&
          extra_tokens == o.extra_tokens &&
          extra_tokens_end_date == o.extra_tokens_end_date &&
          is_yearly_paid == o.is_yearly_paid &&
          is_active == o.is_active &&
          tokens_percent_usage_alert == o.tokens_percent_usage_alert &&
          tokens_percent_usage_alert_sent == o.tokens_percent_usage_alert_sent &&
          is_managed == o.is_managed &&
          next_monthly_term == o.next_monthly_term &&
          remaining_tokens == o.remaining_tokens
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [passport_id, plan_id, optional_linked_subscription_id, subscription_date, expiration_date, current_tokens_used, extra_tokens, extra_tokens_end_date, is_yearly_paid, is_active, tokens_percent_usage_alert, tokens_percent_usage_alert_sent, is_managed, next_monthly_term, remaining_tokens].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
