=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module OpenapiClient
  # Represents information about a read barcode.
  class BarcodeInfo
    attr_accessor :type

    attr_accessor :barcode1_d_symbology

    # Specifies the data contained within the barcode.
    attr_accessor :data

    # Specifies the horizontal top-left position of the barcode, in pixels.
    attr_accessor :x1

    # Specifies the horizontal top-right position of the barcode, in pixels.
    attr_accessor :x2

    # Specifies the horizontal bottom-left position of the barcode, in pixels.
    attr_accessor :x3

    # Specifies the horizontal bottom-right position of the barcode, in pixels.
    attr_accessor :x4

    # Specifies the vertical top-left position of the barcode, in pixels.
    attr_accessor :y1

    # Specifies the vertical top-right position of the barcode, in pixels.
    attr_accessor :y2

    # Specifies the vertical bottom-left position of the barcode, in pixels.
    attr_accessor :y3

    # Specifies the vertical bottom-right position of the barcode, in pixels.
    attr_accessor :y4

    # Specifies the left coordinates of the bounding box of the barcode, in inches.
    attr_accessor :bbox_left_inches

    # Specifies the top coordinates of the bounding box of the barcode, in inches.
    attr_accessor :bbox_top_inches

    # Specifies the width of the bounding box of the barcode, in inches.
    attr_accessor :bbox_width_inches

    # Specifies the height of the bounding box of the barcode, in inches.
    attr_accessor :bbox_height_inches

    # Specifies the number of the page on which the barcode was read.
    attr_accessor :page_number

    # Specifies the width, in pixels, of the page where the barcode has been decoded.
    attr_accessor :page_pixel_width

    # Specifies the height, in pixels, of the page where the barcode has been decoded.
    attr_accessor :page_pixel_height

    # Specifies the horizontal resolution, in pixel per inches, of the page where the barcode has been decoded.
    attr_accessor :page_horizontal_resolution

    # Specifies the vertical resolution, in pixel per inches, of the page where the barcode has been decoded.
    attr_accessor :page_vertical_resolution

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'Type',
        :'barcode1_d_symbology' => :'Barcode1DSymbology',
        :'data' => :'Data',
        :'x1' => :'X1',
        :'x2' => :'X2',
        :'x3' => :'X3',
        :'x4' => :'X4',
        :'y1' => :'Y1',
        :'y2' => :'Y2',
        :'y3' => :'Y3',
        :'y4' => :'Y4',
        :'bbox_left_inches' => :'BboxLeftInches',
        :'bbox_top_inches' => :'BboxTopInches',
        :'bbox_width_inches' => :'BboxWidthInches',
        :'bbox_height_inches' => :'BboxHeightInches',
        :'page_number' => :'PageNumber',
        :'page_pixel_width' => :'PagePixelWidth',
        :'page_pixel_height' => :'PagePixelHeight',
        :'page_horizontal_resolution' => :'PageHorizontalResolution',
        :'page_vertical_resolution' => :'PageVerticalResolution'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'BarcodeType',
        :'barcode1_d_symbology' => :'Barcode1DSymbology',
        :'data' => :'String',
        :'x1' => :'Integer',
        :'x2' => :'Integer',
        :'x3' => :'Integer',
        :'x4' => :'Integer',
        :'y1' => :'Integer',
        :'y2' => :'Integer',
        :'y3' => :'Integer',
        :'y4' => :'Integer',
        :'bbox_left_inches' => :'Float',
        :'bbox_top_inches' => :'Float',
        :'bbox_width_inches' => :'Float',
        :'bbox_height_inches' => :'Float',
        :'page_number' => :'Integer',
        :'page_pixel_width' => :'Integer',
        :'page_pixel_height' => :'Integer',
        :'page_horizontal_resolution' => :'Float',
        :'page_vertical_resolution' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'data',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::BarcodeInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::BarcodeInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'barcode1_d_symbology')
        self.barcode1_d_symbology = attributes[:'barcode1_d_symbology']
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      end

      if attributes.key?(:'x1')
        self.x1 = attributes[:'x1']
      end

      if attributes.key?(:'x2')
        self.x2 = attributes[:'x2']
      end

      if attributes.key?(:'x3')
        self.x3 = attributes[:'x3']
      end

      if attributes.key?(:'x4')
        self.x4 = attributes[:'x4']
      end

      if attributes.key?(:'y1')
        self.y1 = attributes[:'y1']
      end

      if attributes.key?(:'y2')
        self.y2 = attributes[:'y2']
      end

      if attributes.key?(:'y3')
        self.y3 = attributes[:'y3']
      end

      if attributes.key?(:'y4')
        self.y4 = attributes[:'y4']
      end

      if attributes.key?(:'bbox_left_inches')
        self.bbox_left_inches = attributes[:'bbox_left_inches']
      end

      if attributes.key?(:'bbox_top_inches')
        self.bbox_top_inches = attributes[:'bbox_top_inches']
      end

      if attributes.key?(:'bbox_width_inches')
        self.bbox_width_inches = attributes[:'bbox_width_inches']
      end

      if attributes.key?(:'bbox_height_inches')
        self.bbox_height_inches = attributes[:'bbox_height_inches']
      end

      if attributes.key?(:'page_number')
        self.page_number = attributes[:'page_number']
      end

      if attributes.key?(:'page_pixel_width')
        self.page_pixel_width = attributes[:'page_pixel_width']
      end

      if attributes.key?(:'page_pixel_height')
        self.page_pixel_height = attributes[:'page_pixel_height']
      end

      if attributes.key?(:'page_horizontal_resolution')
        self.page_horizontal_resolution = attributes[:'page_horizontal_resolution']
      end

      if attributes.key?(:'page_vertical_resolution')
        self.page_vertical_resolution = attributes[:'page_vertical_resolution']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          barcode1_d_symbology == o.barcode1_d_symbology &&
          data == o.data &&
          x1 == o.x1 &&
          x2 == o.x2 &&
          x3 == o.x3 &&
          x4 == o.x4 &&
          y1 == o.y1 &&
          y2 == o.y2 &&
          y3 == o.y3 &&
          y4 == o.y4 &&
          bbox_left_inches == o.bbox_left_inches &&
          bbox_top_inches == o.bbox_top_inches &&
          bbox_width_inches == o.bbox_width_inches &&
          bbox_height_inches == o.bbox_height_inches &&
          page_number == o.page_number &&
          page_pixel_width == o.page_pixel_width &&
          page_pixel_height == o.page_pixel_height &&
          page_horizontal_resolution == o.page_horizontal_resolution &&
          page_vertical_resolution == o.page_vertical_resolution
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, barcode1_d_symbology, data, x1, x2, x3, x4, y1, y2, y3, y4, bbox_left_inches, bbox_top_inches, bbox_width_inches, bbox_height_inches, page_number, page_pixel_width, page_pixel_height, page_horizontal_resolution, page_vertical_resolution].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
