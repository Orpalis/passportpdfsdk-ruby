=begin
#PassportPDF API

#Another brick in the cloud

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PDFApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PDFApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PDFApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PDFApi' do
    it 'should create an instance of PDFApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PDFApi)
    end
  end

  # unit tests for annotate
  # Annotates a previously uploaded document.
  # @param pdf_annotate_parameters A PdfAnnotateParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfAnnotateResponse]
  describe 'annotate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_deskew
  # Performs auto deskew on a page range of a previously uploaded document.
  # @param pdf_auto_deskew_parameters A PdfAutoDeskewParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfAutoDeskewResponse]
  describe 'auto_deskew test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_page
  # Clears a page range from a previously uploaded document.
  # @param pdf_clear_page_parameters A PdfClearPageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfClearPageResponse]
  describe 'clear_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clone_page
  # Clones specific pages from a previously uploaded document to another previously uploaded document.
  # @param pdf_clone_page_parameters A PdfClonePageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfClonePageResponse]
  describe 'clone_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for close_pdf
  # Closes a previously uploaded document.
  # @param pdf_close_document_parameters A PdfCloseDocumentParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfCloseDocumentResponse]
  describe 'close_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_to_pdfa
  # Converts a previously uploaded document to PDF/A.
  # @param pdf_convert_to_pdfa_parameters A PdfConvertToPDFAParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfConvertToPDFAResponse]
  describe 'convert_to_pdfa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_page
  # Deletes a page range from a previously uploaded document.
  # @param pdf_delete_page_parameters A PdfDeletePageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfDeletePageResponse]
  describe 'delete_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for detect_page_orientation
  # Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them.
  # @param pdf_detect_page_orientation_parameters A PdfDetectPageOrientationParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfDetectPageOrientationResponse]
  describe 'detect_page_orientation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for digi_sign
  # Signs a previously uploaded document digitally.
  # @param pdf_digi_sign_parameters A PdfDigiSignParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfDigiSignResponse]
  describe 'digi_sign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for draw_image
  # Draws an image on a page range of a previously uploaded document.
  # @param pdf_draw_image_parameters A PdfDrawImageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfDrawImageResponse]
  describe 'draw_image test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for extract_page
  # Extracts a page range from a previously uploaded document into one or several new documents.
  # @param pdf_extract_page_parameters A PdfExtractPageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfExtractPageResponse]
  describe 'extract_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for extract_text
  # Extracts text from the document pages.
  # @param pdf_extract_text_parameters A PdfExtractTextParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfExtractTextResponse]
  describe 'extract_text test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for flatten
  # Flattens the form-fields, annotations, and/or the layers of a previously uploaded document.
  # @param pdf_flatten_parameters A PdfFlatten object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfFlattenResponse]
  describe 'flatten test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_info
  # Gets information about a previously uploaded document.
  # @param pdf_get_info_parameters A PdfGetInfoParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfGetInfoResponse]
  describe 'get_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_page_thumbnail
  # Gets a thumbnail of each page within the provided page range from a previously uploaded document.
  # @param pdf_get_page_thumbnail_parameters A PdfGetPageThumbnailParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfGetPageThumbnailResponse]
  describe 'get_page_thumbnail test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pdf_import_supported_file_extensions
  # Gets the supported file extensions by the LoadDocumentAsPDF action.
  # @param [Hash] opts the optional parameters
  # @return [StringArrayResponse]
  describe 'get_pdf_import_supported_file_extensions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_image
  # Inserts an image on a new page of a previously uploaded document.
  # @param pdf_insert_image_parameters A PdfInsertImageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfInsertImageResponse]
  describe 'insert_image test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_new_page
  # Inserts one or more new blank pages to a specific position in a previously uploaded document.
  # @param pdf_insert_new_page_parameters A PdfInsertNewPageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfInsertNewPageResponse]
  describe 'insert_new_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_page_number
  # Inserts page number(s) on a document.
  # @param pdf_insert_page_number_parameters A PdfInsertPageNumberParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfInsertPageNumberResponse]
  describe 'insert_page_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for insert_text
  # Inserts text on a document.
  # @param pdf_insert_text_parameters A PdfInsertTextParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfInsertTextResponse]
  describe 'insert_text test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for linearize
  # Linearizes a previously uploaded document.
  # @param pdf_linearize_parameters A PdfLinearizeParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfLinearizeResponse]
  describe 'linearize test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for load_document_as_pdf
  # Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
  # @param pdf_load_document_from_byte_array_parameters A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfLoadDocumentResponse]
  describe 'load_document_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for load_document_as_pdf_multipart
  # Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
  # @param file_data The data of the document.
  # @param [Hash] opts the optional parameters
  # @option opts [PdfLoadDocumentParameters] :load_document_parameters 
  # @return [PdfLoadDocumentResponse]
  describe 'load_document_as_pdf_multipart test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for merge
  # Merges several previously uploaded documents into a new PDF.
  # @param pdf_merge_parameters A PdfMergeParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfMergeResponse]
  describe 'merge test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for merge_pages
  # Merges multiple pages, vertically, within a previously uploaded document into one single page.
  # @param pdf_merge_pages_parameters A PdfMergePages object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfMergePagesResponse]
  describe 'merge_pages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_page
  # Moves a page range from a previously uploaded document.
  # @param pdf_move_page_parameters A PdfMovePageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfMovePageResponse]
  describe 'move_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for o_cr
  # Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages.
  # @param pdf_ocr_parameters A PdfOCRParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfOCRResponse]
  describe 'o_cr test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for protect
  # Protects a previously uploaded document.
  # @param pdf_protect_parameters A PdfProtectParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfProtectResponse]
  describe 'protect test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_barcodes
  # Reads barcodes from a previously uploaded document.
  # @param pdf_read_barcodes_parameters A PdfReadBarcodesParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ReadBarcodesResponse]
  describe 'read_barcodes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reduce
  # Reduces the size of a previously uploaded document.
  # @param pdf_reduce_parameters A PdfReduceParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfReduceResponse]
  describe 'reduce test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_page_form_fields
  # Removes the form fields from a page range of a previously uploaded document.
  # @param pdf_remove_page_form_fields_parameters A PdfRemovePageFormFieldsParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfRemovePageFormFieldsResponse]
  describe 'remove_page_form_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_text
  # Removes text (all text or only invisible one) from a previously uploaded PDF.
  # @param pdf_remove_text_parameters A PdfRemoveTextParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfRemoveTextResponse]
  describe 'remove_text test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reorder_pages
  # Reorders pages of a previously uploaded document.
  # @param pdf_reorder_pages_parameters A PdfReorderPagesParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfReorderPagesResponse]
  describe 'reorder_pages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repair_document
  # Repairs a previously uploaded PDF document.
  # @param pdf_repair_document_parameters A PdfRepairDocumentParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfRepairDocumentResponse]
  describe 'repair_document test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rotate_page_standard
  # Rotates (standardly) a page range from a previously uploaded document.
  # @param pdf_rotate_page_standard_parameters A PdfRotatePageStandardParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfRotatePageStandardResponse]
  describe 'rotate_page_standard test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_jpeg
  # Saves a previously uploaded document as JPEG, and sends the file data in a JSON-serialized object.
  # @param pdf_save_as_jpeg_parameters A PdfSaveAsJPEGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSaveAsJPEGResponse]
  describe 'save_as_jpeg test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_jpeg_file
  # Saves a previously uploaded document as JPEG, and streams the file binary data to the response (this is the most efficient download method).
  # @param pdf_save_as_jpeg_parameters A PdfSaveAsJPEGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'save_as_jpeg_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_png
  # Saves a previously uploaded document as PNG, and sends the file data in a JSON-serialized object.
  # @param pdf_save_as_png_parameters A PdfSaveAsPNGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSaveAsPNGResponse]
  describe 'save_as_png test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_png_file
  # Saves a previously uploaded document as PNG, and streams the file binary data to the response (this is the most efficient download method).
  # @param pdf_save_as_png_parameters A PdfSaveAsPNGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'save_as_png_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_tiff
  # Saves a previously uploaded document as TIFF, and sends the file data in a JSON-serialized object.
  # @param pdf_save_as_tiff_parameters A PdfSaveAsTIFFParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSaveAsTIFFResponse]
  describe 'save_as_tiff test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_tiff_file
  # Saves a previously uploaded document as TIFF, and streams the file binary data to the response (this is the most efficient download method).
  # @param pdf_save_as_tiff_parameters A PdfSaveAsTIFFParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'save_as_tiff_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_tiff_multipage
  # Saves a previously uploaded document as multipage TIFF, and sends the file data in a JSON-serialized object.
  # @param pdf_save_as_tiff_multipage_parameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSaveAsTIFFMultipageResponse]
  describe 'save_as_tiff_multipage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_as_tiff_multipage_file
  # Saves a previously uploaded document as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
  # @param pdf_save_as_tiff_multipage_parameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'save_as_tiff_multipage_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_document
  # Saves a previously uploaded document as PDF, and sends the file data in a JSON-serialized object.
  # @param pdf_save_document_parameters A PdfSaveDocumentParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSaveDocumentResponse]
  describe 'save_document test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_document_to_file
  # Saves a previously uploaded document as PDF, and streams the file binary data to the response (this is the most efficient download method).
  # @param pdf_save_document_parameters A PdfSaveDocumentParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'save_document_to_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for scale_page
  # Scales a page range from a previously uploaded document.
  # @param pdf_scale_page_parameters A PdfScalePage object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfScalePageResponse]
  describe 'scale_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_info
  # Sets information to a previously uploaded document.
  # @param pdf_set_info_parameters A PdfSetInfoParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSetInfoResponse]
  describe 'set_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_initial_view
  # Sets various document level initial view options to a previously uploaded document.
  # @param pdf_set_initial_view_parameters A PdfsetInitialViewParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSetInitialViewResponse]
  describe 'set_initial_view test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_page_box
  # Sets pagebox to a page range from previously uploaded document.
  # @param pdf_set_page_box_parameters A PdfSetPageBoxParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSetPageBoxResponse]
  describe 'set_page_box test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_password
  # Unprotects a previously uploaded document.
  # @param pdf_set_password_parameters A PdfSetPasswordParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSetPasswordResponse]
  describe 'set_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for split
  # Splits a previously uploaded document into new ones.
  # @param pdf_split_parameters A PdfSplitParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSplitResponse]
  describe 'split test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for swap_pages
  # Swaps two pages from a previously uploaded document.
  # @param pdf_swap_pages_parameters A PdfSwapPagesParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfSwapPagesResponse]
  describe 'swap_pages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unprotect
  # Unprotects a previously uploaded document.
  # @param pdf_unprotect_parameters A PdfUnprotectParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [PdfUnprotectResponse]
  describe 'unprotect test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
