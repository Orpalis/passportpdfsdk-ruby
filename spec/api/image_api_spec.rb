=begin
#PassportPDF API

#      Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ImageApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ImageApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ImageApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ImageApi' do
    it 'should create an instance of ImageApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ImageApi)
    end
  end

  # unit tests for image_adjust
  # Adjusts a previously uploaded image.
  # @param image_adjust_parameters An ImageAdjustParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageAdjustResponse]
  describe 'image_adjust test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_auto_crop
  # Automatically crops a previously uploaded image.
  # @param image_auto_crop_parameters An ImageAutoCropParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageAutoCropResponse]
  describe 'image_auto_crop test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_cleanup_document
  # Cleanup a previously uploaded image.
  # @param image_cleanup_document_parameters An ImageCleanupDocumentParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageCleanupDocumentResponse]
  describe 'image_cleanup_document test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_clone_regions
  # Clones regions from a previously uploaded image into new images.
  # @param image_clone_regions_parameters An ImageCloneRegionsParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageCloneRegionsResponse]
  describe 'image_clone_regions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_close
  # Closes a previously uploaded image.
  # @param image_close_parameters An ImageCloseParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageCloseResponse]
  describe 'image_close test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_convert_color_depth
  # Converts the color depth of a previously uploaded image.
  # @param image_convert_color_depth_parameters An ImageConvertColorDepthParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageConvertColorDepthResponse]
  describe 'image_convert_color_depth test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_crop
  # Crops a previously uploaded image.
  # @param image_crop_parameters An ImageCropParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageCropResponse]
  describe 'image_crop test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_delete_page
  # Deletes a page range from a previously uploaded image.
  # @param image_delete_page_parameters An ImageDeletePageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageDeletePageResponse]
  describe 'image_delete_page test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_detect_blank_pages
  # Detects the blank page(s) from a previously uploaded image and offers to remove them.
  # @param image_detect_blank_pages_parameters An ImageDetectBlankPagesParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageDetectBlankPagesResponse]
  describe 'image_detect_blank_pages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_detect_color
  # Performs color detection  on a previously uploaded image.
  # @param image_detect_color_parameters An ImageDetectColorParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageDetectColorResponse]
  describe 'image_detect_color test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_detect_page_orientation
  # Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them.
  # @param image_detect_page_orientation_parameters An ImagedetectPageOrientationParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageDetectPageOrientationResponse]
  describe 'image_detect_page_orientation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_filter
  # Applies filters to a previously uploaded image.
  # @param image_filter_parameters An ImageFilterParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageFilterResponse]
  describe 'image_filter test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_get_page_thumbnail
  # Gets a thumbnail of each page within the provided page range from a previously uploaded image.
  # @param image_get_page_thumbnail_parameters A PDFGetPageThumbnailParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageGetPageThumbnailResponse]
  describe 'image_get_page_thumbnail test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_get_supported_file_extensions
  # Gets the supported file extensions by the image loading actions.
  # @param [Hash] opts the optional parameters
  # @return [StringArrayResponse]
  describe 'image_get_supported_file_extensions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_load
  # Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
  # @param load_image_from_byte_array_parameters A LoadImageFromByteArrayParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageLoadResponse]
  describe 'image_load test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_load_multipart
  # Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
  # @param file_data The data of the document.
  # @param [Hash] opts the optional parameters
  # @option opts [LoadImageParameters] :load_image_parameters 
  # @return [ImageLoadResponse]
  describe 'image_load_multipart test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_micr
  # Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image.
  # @param image_micr_parameters An ImageMICRParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageMICRResponse]
  describe 'image_micr test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_read_barcodes
  # Reads barcodes from a previously uploaded image.
  # @param image_read_barcodes_parameters An ImageReadBarcodesParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ReadBarcodesResponse]
  describe 'image_read_barcodes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_resize
  # Resizes a previously uploaded image.
  # @param image_resize_parameters An ImageResizeParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageResizeResponse]
  describe 'image_resize test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_rotate
  # Rotates and/or flips a previously uploaded image.
  # @param image_rotate_parameters An ImageRotateParameters object specifying the parameters for the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageRotateResponse]
  describe 'image_rotate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_jpeg
  # Saves a previously uploaded image as JPEG.
  # @param image_save_as_jpeg_parameters An ImageSaveAsJPEGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSaveAsJPEGResponse]
  describe 'image_save_as_jpeg test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_jpeg_file
  # Saves a previously uploaded image as JPEG.
  # @param image_save_as_jpeg_parameters An ImageSaveAsJPEGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'image_save_as_jpeg_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_pdf
  # Saves a previously uploaded image as PDF.
  # @param image_save_as_pdf_parameters An ImagesaveAsPDFParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSaveAsPDFResponse]
  describe 'image_save_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_pdf_file
  # Saves a previously uploaded image as PDF.
  # @param image_save_as_pdf_parameters An ImagesaveAsPDFParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'image_save_as_pdf_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_pdfmrc
  # Saves a previously uploaded image as PDF using MRC compression.
  # @param image_save_as_pdfmrc_parameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSaveAsPDFMRCResponse]
  describe 'image_save_as_pdfmrc test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_pdfmrc_file
  # Saves a previously uploaded image as PDF using MRC compression.
  # @param image_save_as_pdfmrc_parameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'image_save_as_pdfmrc_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_png
  # Saves a previously uploaded image as PNG.
  # @param image_save_as_png_parameters An ImageSaveAsPNGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSaveAsPNGResponse]
  describe 'image_save_as_png test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_png_file
  # Saves a previously uploaded image as PNG.
  # @param image_save_as_png_parameters An ImageSaveAsPNGParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'image_save_as_png_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_tiff
  # Saves a previously uploaded image as TIFF.
  # @param image_save_as_tiff_parameters An ImageSaveAsTIFFParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSaveAsTIFFResponse]
  describe 'image_save_as_tiff test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_tiff_file
  # Saves a previously uploaded image as TIFF.
  # @param image_save_as_tiff_parameters An ImageSaveAsTIFFParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'image_save_as_tiff_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_tiff_multipage
  # Saves a previously uploaded image as multipage TIFF.
  # @param image_save_as_tiff_multipage_parameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSaveAsTIFFMultipageResponse]
  describe 'image_save_as_tiff_multipage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_save_as_tiff_multipage_file
  # Saves a previously uploaded image as multipage TIFF.
  # @param image_save_as_tiff_multipage_parameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'image_save_as_tiff_multipage_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for image_swap_pages
  # Swaps two pages from a previously uploaded image.
  # @param image_swap_pages_parameters An ImageSwapPagesParameters object specifying the parameters of the action.
  # @param [Hash] opts the optional parameters
  # @return [ImageSwapPagesResponse]
  describe 'image_swap_pages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
